
&НаКлиенте
Процедура Компиляция(Команда)

КонецПроцедуры

&НаКлиенте
Функция СтрРазделитьСЭкранированием(Строка, Разделитель, НомерСтроки, Отказ)
	Если ПустаяСтрока(Строка) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	ТекСтрока = "";
	Экранировать = Ложь;          
	
	Сч = 1;
	Пока Сч <= СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч , 1);
		
		Если НЕ Экранировать И ЭтоКавычка(Символ) Тогда    
			ТекстВКавычках = ДобавитьТекстВКавычках(Строка, Сч + 1, Символ);
			
			Если ТекстВКавычках = Неопределено Тогда
				СообщитьОбОшибкеПарсинга(НомерСтроки, Сч, "Не найдены закрывающие кавычки", Отказ);
				Возврат Неопределено;
			КонецЕсли;
			
			ТекСтрока = ТекСтрока + ТекстВКавычках;
			Сч = Сч + СтрДлина(ТекстВКавычках);
			Продолжить;
		КонецЕсли;
		
		Если НЕ Экранировать И Символ = Разделитель Тогда
			Результат.Добавить(СтрокаБезКавычек(ТекСтрока));
			ТекСтрока = "";
			Экранировать = Ложь;
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;
		
		Экранировать = Символ = "\";
		ТекСтрока = ТекСтрока + Символ;     
		Сч = Сч + 1;
	КонецЦикла;
	
	Результат.Добавить(СтрокаБезКавычек(ТекСтрока));
	
	Возврат Результат;
КонецФункции     

&НаКлиенте
Функция СтрокаБезКавычек(Знач Строка)
	
	СтрКавычки = ВыделитьНачальныйКонечныйСимволы(Строка, """", """");
	Если СтрКавычки.ЕстьНачальный И СтрКавычки.ЕстьКонечный Тогда
		Строка = СтрКавычки.Строка;
	КонецЕсли;
	
	СтрКавычки = ВыделитьНачальныйКонечныйСимволы(Строка, "'", "'");
	Если СтрКавычки.ЕстьНачальный И СтрКавычки.ЕстьКонечный Тогда
		Строка = СтрКавычки.Строка;
	КонецЕсли;
	
	Возврат Строка;	
КонецФункции

&НаКлиенте
Функция ДобавитьТекстВКавычках(Строка, Начало, ОткрывающийСимвол)
	Результат = ОткрывающийСимвол;
	Сч = Начало;
	Пока Сч <= СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч , 1);  
		Результат = Результат + Символ;
		
		Если ЭтоЗакрывающийЭлемент(Символ, ОткрывающийСимвол) Тогда
			Возврат Результат;	
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция СтрПолучитьТекстВнутри(Строка, Начало, ОткрывающийСимвол)
	Результат = "";
	Сч = Начало + 1;
	Пока Сч <= СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч , 1);  
		Если ЭтоЗакрывающийЭлемент(Символ, ОткрывающийСимвол) Тогда
			Возврат Результат;	
		КонецЕсли;

		Результат = Результат + Символ;
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Отказ = Ложь;
	СообщитьОбОшибкеПарсинга(1, Начало, "Не найден закрывающий символ", Отказ);
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ВыделитьГруппу(НомерСтроки, Строка, ОткрывающийСимвол, Отказ)
	Результат = Новый Массив;
	
	ТекЭлемент = Новый Структура("Тип,Текст", "Строка", "");
	
	Сч = 1;
	Пока Сч <= СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч , 1);  
		
		Если ЭтоКавычка(Символ) Тогда    
			ТекстВКавычках = ДобавитьТекстВКавычках(Строка, Сч + 1, Символ);
			
			Если ТекстВКавычках = Неопределено Тогда
				СообщитьОбОшибкеПарсинга(НомерСтроки, Сч, "Не найдены закрывающие кавычки", Отказ);
				Возврат Неопределено;
			КонецЕсли;
			
			ТекЭлемент.Текст = ТекЭлемент.Текст + ТекстВКавычках;
			Сч = Сч + СтрДлина(ТекстВКавычках);
			Продолжить;
		КонецЕсли;
		
		Если Символ = ОткрывающийСимвол Тогда
			Если НЕ ПустаяСтрока(ТекЭлемент.Текст) Тогда
				Результат.Добавить(ТекЭлемент);
			КонецЕсли;
			
			ТекЭлемент = Новый Структура("Тип,Текст", "Группа", "");
			Сч = Сч + 1;
			
			Продолжить;
		КонецЕсли;
		
		Если ЭтоЗакрывающийЭлемент(Символ, ОткрывающийСимвол) Тогда  
			Если НЕ ПустаяСтрока(ТекЭлемент.Текст) Тогда
				Результат.Добавить(ТекЭлемент);
			КонецЕсли;
			ТекЭлемент = Новый Структура("Тип,Текст", "Строка", "");
			
			Сч = Сч + 1;
			Продолжить;
		КонецЕсли;

		ТекЭлемент.Текст = ТекЭлемент.Текст + Символ;
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Если НЕ ПустаяСтрока(ТекЭлемент.Текст) Тогда
		Результат.Добавить(ТекЭлемент);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Процедура КомпиляцияНаСервере()  
	ЭлементыДерева = ДеревоЭлементов.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Представление = "Группа" Тогда
			ЭлементДерева.УИДЭлемента = Новый УникальныйИдентификатор;
			ИмяЭлемента = "Элемент_" + СтрЗаменить(ЭлементДерева.УИДЭлемента,"-","");
			НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ЭтаФорма);
			НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			НоваяГруппа.ОтображатьЗаголовок = ЛОЖЬ; 
			НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КонецЕсли;  
		ПодЭлементы = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого ПодЭлемент Из ПодЭлементы Цикл       
			ПодЭлемент.УИДЭлемента = Новый УникальныйИдентификатор;
			ИмяЭлемента = "Элемент_" + СтрЗаменить(ПодЭлемент.УИДЭлемента,"-","");

			Если СтрНайти(ПодЭлемент.Представление,":") Тогда  
				ДобавляемыеРеквизиты = Новый Массив;
				НовыйРеквизит = Новый РеквизитФормы(ИмяЭлемента,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500))); 
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),НоваяГруппа);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
				НовыйЭлемент.Заголовок = СокрЛП(СтрЗаменить(ПодЭлемент.Представление, ":", ""));
			ИначеЕсли СтрНайти(ПодЭлемент.Представление,"<") Тогда
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента , Тип("КнопкаФормы"), НоваяГруппа);
				НовыйЭлемент.Заголовок = СтрЗаменить(СтрЗаменить(ПодЭлемент.Представление,"<",""),">","");
				НовыйЭлемент.ИмяКоманды = "КомандаЗаглушка";				
				
			Иначе
				ДобавляемыеРеквизиты = Новый Массив;
				НовыйРеквизит = Новый РеквизитФормы(ИмяЭлемента,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500))); 
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				
				НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"),НоваяГруппа);
				НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
				НовыйЭлемент.ПутьКДанным = ИмяЭлемента;
				НовыйЭлемент.Заголовок = СокрЛП(СтрЗаменить(ПодЭлемент.Представление, ":", ""));
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//&НаКлиенте
//Процедура ДобавитьКнопку(Команда)
//	ДобавитьКнопкуНаСервере();
//КонецПроцедуры
&НаКлиенте
Процедура КомандаЗаглушка(Команда)
	Сообщить("Команда");
КонецПроцедуры

&НаСервере
Процедура ФорматированиеНаСервере()
	Текст = Новый Массив;
	Текст.Добавить(" Центр ");
	Текст.Добавить("[х] Право");
	Текст.Добавить("[ ] Лево ");
	Текст.Добавить(" Длинный текст ");
	
	МаксШирина = 0;
	Для Каждого Строка Из Текст Цикл
		СимволСлева = "";
		Если СтрНачинаетсяС(Строка, " ") Тогда
			СимволСлева = " ";
		КонецЕсли;
		СимволСправа = "";
		Если СтрЗаканчиваетсяНа(Строка, " ") Тогда
			СимволСправа = " ";
		КонецЕсли;

		МаксШирина = Макс(СтрДлина(СимволСлева + СокрЛП(Строка) + СимволСправа), МаксШирина);
	КонецЦикла;
	
	Результат = Новый Массив;
	
	Для Каждого Строка Из Текст Цикл      
		СимволСлева = "";
		Если СтрНачинаетсяС(Строка, " ") Тогда
			СимволСлева = " ";
		КонецЕсли;
		СимволСправа = "";
		Если СтрЗаканчиваетсяНа(Строка, " ") Тогда
			СимволСправа = " ";
		КонецЕсли;
		НоваяСтрока = СимволСлева + СокрЛП(Строка) + СимволСправа;
		
		ШиринаСтроки = СтрДлина(Строка);

		ПробеловДобавить = МаксШирина - ШиринаСтроки;
		ПробеловДобавитьСлева = 0;
		ПробеловДобавитьСправа = 0;

		Если СимволСлева = " " Тогда
			Если СимволСправа = " " Тогда
				ПробеловДобавитьСлева = Окр(ПробеловДобавить/2);
				ПробеловДобавитьСправа = ПробеловДобавить - ПробеловДобавитьСлева;
			Иначе
				ПробеловДобавитьСлева = ПробеловДобавить; 
			КонецЕсли;
		Иначе
			ПробеловДобавитьСправа = ПробеловДобавить;
		КонецЕсли;   
		НоваяСтрока = СформироватьСтрокуСимволов(" ", ПробеловДобавитьСлева) + НоваяСтрока + СформироватьСтрокуСимволов(" ", ПробеловДобавитьСправа);	
		Результат.Добавить(НоваяСтрока);
	КонецЦикла;

	ТекстРезультат = СтрСоединить(ОбернутьТекстГруппы(Результат), Символы.ПС);
КонецПроцедуры

Функция ОбернутьТекстГруппы(Текст)
	Если Текст.Количество() = 0 Тогда
		
	КонецЕсли;	
	
	Ширина = СтрДлина(Текст[0]);
	
	Результат = Новый Массив;
	Результат.Добавить(СформироватьСтрокуСимволов("*", Ширина + 2));
	
	Для Каждого Строка Из Текст Цикл
		Результат.Добавить("*" + Строка + "*");
	КонецЦикла;
	
	Результат.Добавить(СформироватьСтрокуСимволов("*", Ширина + 2));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Форматирование(Команда)      

КонецПроцедуры

//&НаКлиенте
//Процедура РассчитатьМинимальнуюШирину(Данные)
//	Для Каждого Подчиненный Из Данные.Подчиненные Цикл
//		Если Подчиненный.ТипЭлемента = "ГруппаФормы" Тогда
//			
//		КонецЕсли;
//	КонецЦикла;
//КонецПроцедуры
&НаКлиенте
Функция ПостроитьГоризонтальнуюГруппуФормы(Данные)
	Результат = Новый Массив;
	
	КоличествоСтрок = 0;
	ГруппыФормы = Новый Массив;
	Для Каждого Подчиненный Из Данные.Подчиненные Цикл
		ТекГруппаФормы = ПостроитьГруппуФормы(Подчиненный);
		КоличествоСтрок = Макс(КоличествоСтрок, ТекГруппаФормы.Количество());
		ГруппыФормы.Добавить(ТекГруппаФормы);
	КонецЦикла;
	
	Для Сч = 0 По КоличествоСтрок-1 Цикл
		МассивСцепленнойСтроки = Новый Массив;
		Для Каждого ГруппаФормы Из ГруппыФормы Цикл
			Если Сч > ГруппаФормы.ВГраница() Тогда
				МассивСцепленнойСтроки.Добавить("");
				Продолжить;
			КонецЕсли;
			МассивСцепленнойСтроки.Добавить(ГруппаФормы[Сч]);
		КонецЦикла;
		Если Сч = 0 Тогда
			Результат.Добавить(СтрСоединить(МассивСцепленнойСтроки,"+"));
		Иначе
			Результат.Добавить(СтрСоединить(МассивСцепленнойСтроки,"*"));
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПостроитьГруппуФормы(Данные)
	Результат = Новый Массив;
	Результат.Добавить(Данные.Заголовок);
	Для Каждого Подчиненный Из Данные.Подчиненные Цикл
		Если Подчиненный.ТипЭлемента = "ЭлементФормы" Тогда
			Результат.Добавить(Подчиненный.Заголовок);
		ИначеЕсли Подчиненный.ТипЭлемента = "ТаблицаФормы" Тогда
			ШапкаТаблицы = Новый Массив;
			РазделительТаблицы = Новый Массив;
			Для Каждого Колонка Из Подчиненный.Колонки Цикл
				ШапкаТаблицы.Добавить(Колонка.Заголовок);
				РазделительТаблицы.Добавить("---");
			КонецЦикла;
			Результат.Добавить(СтрСоединить(ШапкаТаблицы, "|"));	
			Результат.Добавить(СтрСоединить(РазделительТаблицы, "|"));	
			Для Каждого Строка Из Подчиненный.Строки Цикл
				СтрокаТаблицы = Новый Массив;
				Для Каждого Элемент Из Строка.Элементы Цикл
					СтрокаТаблицы.Добавить(Элемент.Заголовок);
				КонецЦикла;
				Результат.Добавить(СтрСоединить(СтрокаТаблицы, "|"));	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Формирует строку повторяющихся символов заданной длины.
//
// Параметры:
//  Символ      - Строка - символ, из которого будет формироваться строка.
//  ДлинаСтроки - Число  - требуемая длина результирующей строки.
//
// Возвращаемое значение:
//  Строка - строка, состоящая из повторяющихся символов.
//   
&НаСервере
Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция НовыеПараметрыДекомпозиции()
	Результат = Новый Структура();
	Результат.Вставить("ПрошлыеГруппы", Новый Массив);
	Результат.Вставить("НовыеГруппы", Новый Массив);

	Результат.Вставить("ТекущаяПрошлаяГруппа", Неопределено);
	Результат.Вставить("ТекущаяНоваяГруппа", Неопределено);
	
	Результат.Вставить("ДобавленыНовыеГруппы", Ложь);

	Результат.Вставить("ТаблицыГрупп", Новый Соответствие);
 	Результат.Вставить("СтраницыГрупп", Новый Соответствие);

	Результат.Вставить("НомерСтроки", 1);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьТаблицуТекущейГруппы(ЭлементДерева)     

	//Возврат СтрТаблица;
КонецФункции

&НаКлиенте
Функция СоздатьПолучитьСтраницуТекущейГруппы(ПараметрыВыполнения) 
	ТекущаяГруппа = ПолучитьТекущуюГруппу(ПараметрыВыполнения, Истина);
	
	СтрСтраницы = ПараметрыВыполнения.СтраницыГрупп.Получить(ТекущаяГруппа);
	Если СтрСтраницы = Неопределено Тогда
		ОписаниеСтраниц = ПолучитьОписаниеСтраниц(ТекущаяГруппа.ПолучитьЭлементы());

		СтрСтраницы = Новый Структура("Страницы,ТекущаяСтраница", ОписаниеСтраниц, Неопределено); 
		
		ПараметрыВыполнения.СтраницыГрупп.Вставить(ТекущаяГруппа, СтрСтраницы);
	КонецЕсли;
	
	Возврат СтрСтраницы;
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьПустуюСтроку(ПараметрыВыполнения, ОписаниеЭлемента, Выполнена) 

	Если ОписаниеЭлемента.Тип <> "Группировка" Тогда
		Возврат;
	КонецЕсли;  

	Если ОписаниеЭлемента.Значение <> "#" Тогда
		Возврат;
	КонецЕсли;  
	
    Если ОписаниеЭлемента.Элементы.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;

    Если ОписаниеЭлемента.Элементы[0].Элементы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры

//	Выполнена = Истина;
//	Возврат;
//КонецПроцедуры
&НаКлиенте
Процедура ДекомпозироватьЗаголовокГруппы(ПараметрыВыполнения, ОписаниеЭлемента, Выполнена) 
	
	Если ОписаниеЭлемента.Элементы.Количество() <> 1 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекОписаниеЭлемента = ОписаниеЭлемента.Элементы[0];
	
	Если ТекОписаниеЭлемента.Тип <> "Элемент" Тогда
		Возврат;
	КонецЕсли;  

	Значение = СокрЛП(ТекОписаниеЭлемента.Значение);
	
	Если Не СтрНачинаетсяС(Значение, "/") Тогда
		Возврат;
	КонецЕсли;  
	
	ТекущаяГруппа = ПолучитьТекущуюГруппу(ПараметрыВыполнения, Истина);
	ТекущаяГруппа.Свойства.Заголовок = Сред(Значение, 2);
	ТекущаяГруппа.Свойства.ОтображатьЗаголовок = Истина;
	ТекущаяГруппа.Представление = Сред(Значение, 2);
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьСтраницы(ПараметрыВыполнения, ОписаниеЭлемента, Выполнена) 
	
	Если ОписаниеЭлемента.Элементы.Количество() <> 1 Тогда
		Возврат;	
	КонецЕсли;
	
	ТекОписаниеЭлемента = ОписаниеЭлемента.Элементы[0];
	
	Если ТекОписаниеЭлемента.Тип <> "Элемент" Тогда
		Возврат;
	КонецЕсли;  

	Значение = СокрЛП(ТекОписаниеЭлемента.Значение);
	
	Если Не СтрНачинаетсяС(Значение, "/") Тогда
		Возврат;
	КонецЕсли;  
	
	СтрСтраницы = СоздатьПолучитьСтраницуТекущейГруппы(ПараметрыВыполнения);
	
	СтрСтраницы.ТекущаяСтраница = ПолучитьОписаниеСтраницы(СтрСтраницы.Страницы);
	СтрСтраницы.ТекущаяСтраница.Представление = Сред(Значение, 2);
	СтрСтраницы.ТекущаяСтраница.Свойства.Заголовок = Сред(Значение, 2);
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюГруппу(ПараметрыВыполнения, БезСтраниц = Ложь) 
	Если БезСтраниц Тогда
		Возврат ПараметрыВыполнения.ТекущаяНоваяГруппа;
	КонецЕсли;
	
	СтрСтраницы = ПараметрыВыполнения.СтраницыГрупп.Получить(ПараметрыВыполнения.ТекущаяНоваяГруппа);
	
	Если СтрСтраницы = Неопределено Тогда
		Возврат ПараметрыВыполнения.ТекущаяНоваяГруппа;
	КонецЕсли;
	
	Возврат СтрСтраницы.ТекущаяСтраница;
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементыТекущейГруппы(ПараметрыВыполнения)
	Возврат ПолучитьТекущуюГруппу(ПараметрыВыполнения).ПолучитьЭлементы();
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьТаблицу(ПараметрыВыполнения, ЭлементДерева, Выполнена, Отказ) 
	ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);

	ОписаниеЭлемента = ПолучитьПодгруппыСтроки(ОписаниеЭлемента, "|");   

 	Если ОписаниеЭлемента.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;          
	
	Выполнена = Истина;
	
	СтрТаблица = ПолучитьОписаниеТаблицы(ЭлементДерева);
	
	Пока Истина Цикл
		ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);
		
		ЭтоЭлементТаблицы = Ложь;
		ДекомпозироватьЭлементыТаблицы(ПараметрыВыполнения, СтрТаблица, ЭтоЭлементТаблицы, Отказ);

		Если НЕ ЭтоЭлементТаблицы Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ ПараметрыВыполнения_ПерейтиНаСледующуюЗапись(ПараметрыВыполнения) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;  
	
	ПараметрыВыполнения.ИндексТекущейСтроки = ПараметрыВыполнения.ИндексТекущейСтроки - 1;

	//ВызватьИсключение "Некорректный формат таблицы"; 
КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьЭлементыТаблицы(ПараметрыВыполнения, СтрТаблица, Выполнена, Отказ) 
	ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);
	
	ОписаниеЭлемента = ПолучитьПодгруппыСтроки(ОписаниеЭлемента, "|");   

КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьКолонкиТаблицы(ПараметрыВыполнения, СтрТаблица, ОписаниеЭлемента, Выполнена) 
	Если СтрТаблица.КолонкиЗаполнены Тогда
		Возврат;
	КонецЕсли;  

	КолонкиЭлементы = СтрТаблица.Колонки.ПолучитьЭлементы();
	Для Каждого ЭлементКолонка Из ОписаниеЭлемента Цикл
		НовыйЭлемент = ПолучитьОписаниеКолонкиТаблицы(КолонкиЭлементы);
		НовыйЭлемент.Свойства.Заголовок = СокрЛП(ЭлементКолонка);
		НовыйЭлемент.Представление = СокрЛП(ЭлементКолонка);
	КонецЦикла;
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры   

&НаКлиенте
Процедура ДекомпозироватьРазделительТаблицы(ПараметрыВыполнения, СтрТаблица, ОписаниеЭлемента, Выполнена) 
	Если СтрТаблица.КолонкиЗаполнены Тогда
		Возврат;
	КонецЕсли;  

	Для Каждого ЭлементКолонка Из ОписаниеЭлемента Цикл
		Если НЕ ЭтоКонечныйЭлементТаблицы(ЭлементКолонка) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Колонки = СтрТаблица.Колонки.ПолучитьЭлементы();
	
	Для Сч = 0 По ОписаниеЭлемента.ВГраница() Цикл
		ЭлементКолонка = ОписаниеЭлемента[Сч];
		Колонка = Колонки[Сч];
		
		Значение = СокрЛП(ЭлементКолонка);
		
		ВыравниваниеСправа = СтрЗаканчиваетсяНа(Значение, ":");
		ВыравниваниеСлева = СтрНачинаетсяС(Значение, ":");
		
		Если ВыравниваниеСлева И ВыравниваниеСправа Тогда
			Колонка.Свойства.ГоризонтальноеПоложение = "Центр";
		ИначеЕсли ВыравниваниеСправа Тогда
			Колонка.Свойства.ГоризонтальноеПоложение = "Право";
		Иначе
			Колонка.Свойства.ГоризонтальноеПоложение = "Лево";
		КонецЕсли;
		
	КонецЦикла;
	
	СтрТаблица.КолонкиЗаполнены = Истина;
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСвойстваПоОписаниюСтроки(ОписаниеСтроки)

КонецФункции

&НаКлиенте
Функция ПолучитьЭлементСтрокиТаблицы(СтрокаДерева)
	ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Тип = "СтрокиТаблицы" Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьВыравнивание(ПараметрыВыполнения, Отказ) 
	ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);
	
	ГоризонтальноеВыравнивание = "Лево";
	
	ЕстьСлева = СтрНачинаетсяС(ОписаниеЭлемента, "->");
	ЕстьСправа = СтрЗаканчиваетсяНа(ОписаниеЭлемента, "<-");
	Если ЕстьСлева И ЕстьСправа Тогда
		ГоризонтальноеВыравнивание = "Центр";
	ИначеЕсли ЕстьСлева Тогда
		ГоризонтальноеВыравнивание = "Право";
	Иначе
		ГоризонтальноеВыравнивание = "Лево";
	КонецЕсли;   
	
	Если ЕстьСлева Тогда
		ОписаниеЭлемента = СокрЛП(Сред(ОписаниеЭлемента, 3));
	КонецЕсли;

	Если ЕстьСправа Тогда
		ОписаниеЭлемента = СокрЛП(Сред(ОписаниеЭлемента, 1, СтрДлина(ОписаниеЭлемента) - 2));
	КонецЕсли;
	
	ПараметрыВыполнения_УстановитьОписаниеТекущейСтроки(ПараметрыВыполнения, ОписаниеЭлемента);
	
	ПараметрыВыполнения.ГоризонтальноеВыравнивание = ГоризонтальноеВыравнивание;
КонецПроцедуры

&НаКлиенте
Функция ДекомпозироватьСвойства(ОписаниеЭлемента)

	СтрРасположение = ВыделитьНачальныйКонечныйСимволы(ОписаниеЭлемента, "->", "<-");
	Если СтрРасположение.ЕстьНачальный И СтрРасположение.ЕстьКонечный Тогда
		Расположение = "Центр";
	ИначеЕсли СтрРасположение.ЕстьНачальный Тогда
		Расположение = "Право";
	Иначе
		Расположение = "Лево";
	КонецЕсли;
	
	Текст = СтрРасположение.Строка;
	
	СтрСвойства = ПолучитьГруппуСтроки(Текст, "{", "}", "СКонца");
	
	Свойства = Новый Структура;
	Если СтрСвойства.Найден Тогда
		
		МассивСвойства = ПолучитьПодгруппыСтроки(СтрСвойства.Группа, ";");        

		Для Каждого Свойство Из МассивСвойства Цикл
			СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Свойство, "=");
			Свойства.Вставить(СокрЛП(СтрКлючЗначение.Ключ), СокрЛП(СтрКлючЗначение.Значение));
		КонецЦикла;  
	КонецЕсли;
		
	Текст = СтрСвойства.Строка;
	
	Свойства.Вставить("ГоризонтальноеВыравнивание", Расположение);   
	
	Возврат Новый Структура("Текст,Свойства", Текст, Свойства);

	//Выполнена = Истина;
КонецФункции

&НаКлиенте
Функция ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения)
	Возврат ПараметрыВыполнения.Элементы[ПараметрыВыполнения.ИндексТекущейСтроки];
КонецФункции

&НаКлиенте
Процедура ПараметрыВыполнения_УстановитьОписаниеТекущейСтроки(ПараметрыВыполнения, Значение)
	ПараметрыВыполнения.Элементы[ПараметрыВыполнения.ИндексТекущейСтроки] = Значение;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыполнения_ПерейтиНаСледующуюЗапись(ПараметрыВыполнения)
	ПараметрыВыполнения.ИндексТекущейСтроки = ПараметрыВыполнения.ИндексТекущейСтроки + 1;  
	
	Возврат ПараметрыВыполнения.ИндексТекущейСтроки <= ПараметрыВыполнения.Элементы.ВГраница();
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьФлажок(ПараметрыВыполнения, ЭлементДерева, Выполнена, Отказ); 

	//Выполнена = Истина;

	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьНадпись(ПараметрыВыполнения, ЭлементДерева, Выполнена, Отказ) 
    ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);

	НовыйЭлемент = ПолучитьОписаниеНадписи(ЭлементДерева);
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(ОписаниеЭлемента);
	НовыйЭлемент.Свойства.ГоризонтальноеПоложение = ПараметрыВыполнения.ГоризонтальноеВыравнивание;

	НовыйЭлемент.Представление = СокрЛП(ОписаниеЭлемента);
	
	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Функция ЭтоКонечныйЭлемент(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "-","") = "";
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьСуществующуюГруппу(ТекущиеГруппы, МассивЭлементов)
	Для Каждого ЭлементГруппировки Из МассивЭлементов Цикл
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьНовуюГруппу(ТекущиеГруппы, МассивЭлементов)
	Для Каждого ЭлементГруппировки Из МассивЭлементов Цикл
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппуДекомпозировать(НовыеТекущиеГруппы, ТекущаяГруппа, ОписаниеГруппы) 

	Если ОписаниеГруппы.Тип = "Группировка"
		И ОписаниеГруппы.Значение = "+" Тогда
		
		НоваяГруппа = ПолучитьОписаниеГоризонтальнойГруппы(ТекущаяГруппа.ПолучитьЭлементы());      
		
		Для Каждого ОписаниеНовойГруппы Из ОписаниеГруппы.Элементы Цикл
			ДобавитьГруппуДекомпозировать(НовыеТекущиеГруппы, НоваяГруппа, НоваяГруппа);
		КонецЦикла;

		Возврат;
	КонецЕсли;	

	Если ОписаниеГруппы.Тип = "ЭлементГруппировки"
		И ОписаниеГруппы.Значение = "+" Тогда
		
		НоваяГруппа = ПолучитьОписаниеВертикальнойГруппы(ТекущаяГруппа.ПолучитьЭлементы());      
		
		Для Каждого ОписаниеНовойГруппы Из ОписаниеГруппы.Элементы Цикл
			ДобавитьГруппуДекомпозировать(НовыеТекущиеГруппы, НоваяГруппа, НоваяГруппа);
		КонецЦикла;
		Возврат;	
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеВертикальнойГруппы(ЭлементыДерева)
	НовыйЭлемент = ЭлементыДерева.Добавить();
	НовыйЭлемент.Тип = "ВертикальнаяГруппа";
	НовыйЭлемент.Представление = "...";
	НовыйЭлемент.ИндексКартинки = 22;   
	
	НовыйЭлемент.Свойства = Новый Структура("Заголовок,ОтображатьЗаголовок", "", Ложь);
	
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеГоризонтальнойГруппы(ЭлементыДерева)
	НовыйЭлемент = ЭлементыДерева.Добавить();
	НовыйЭлемент.Тип = "ГоризонтальнаяГруппа";
	НовыйЭлемент.Представление = "...";
	НовыйЭлемент.ИндексКартинки = 7;
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеПолеВвода(ЭлементДерева)     
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	НовыйЭлемент = ЭлементыДерева.Добавить();
	НовыйЭлемент.Тип = "ПолеВвода";
	НовыйЭлемент.Представление = "Поле ввода";
	НовыйЭлемент.ИндексКартинки = 15;
	
	НовыйЭлемент.Свойства = Новый Структура("Значение,Заголовок", Ложь, "");
	
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтраниц(ЭлементыДерева)
	НовыйЭлемент = ЭлементыДерева.Добавить();
	НовыйЭлемент.Тип = "Страницы";
	НовыйЭлемент.Представление = "Страницы";
	НовыйЭлемент.ИндексКартинки = 14;
	
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтраницы(ЭлементДерева)
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	НовыйЭлемент = ЭлементыДерева.Добавить();
	НовыйЭлемент.Тип = "Страница";
	НовыйЭлемент.Представление = "Страница";
	НовыйЭлемент.ИндексКартинки = 14;
	НовыйЭлемент.Свойства = Новый Структура("Заголовок", "");
	
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПостроитьДерево(РазбираемаяСтрока, НачальнаяПозиция, ОткрывающийСимвол) 

	//Возврат Результат;
КонецФункции

&НаКлиенте
Функция СгруппироватьЭлементыПоРазделителю(МассивЭлементы, Разделитель)
	НовыеЭлементы = Новый Массив;
	
	ТекГруппировка = Новый Массив;
	Для Каждого ТекЭлемент Из МассивЭлементы Цикл
		Если ТекЭлемент.Тип = "Разделитель" И ТекЭлемент.Значение = Разделитель Тогда  
			НовыеЭлементы.Добавить(ТекГруппировка);
			ТекГруппировка = Новый Массив;   
			Продолжить;
		КонецЕсли;    
		ТекГруппировка.Добавить(ТекЭлемент);
	КонецЦикла;
	
	Если ТекГруппировка.Количество() > 0 Тогда
		НовыеЭлементы.Добавить(ТекГруппировка);
	КонецЕсли;
	
	Возврат НовыеЭлементы;
КонецФункции

&НаКлиенте
Процедура СгруппироватьДерево(ТекЭлемент)  
	МассивРазделителей = СтрРазделить(
	"#
	|+
	| 
	||
	//|:
	|;
	|=",Символы.ПС);        
	
	Для Каждого Разделитель Из МассивРазделителей Цикл
		МассивГрупп = СгруппироватьЭлементыПоРазделителю(ТекЭлемент.Элементы, Разделитель);
		
		Если МассивГрупп.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;         
		
		ТекЭлемент.Элементы = Новый Массив;

		НоваяГруппировка = ПолучитьНовыйЭлементДерева("Группировка", Разделитель, 1);
		НоваяГруппировка.Вставить("Закрыта", Истина);
		ТекЭлемент.Элементы.Добавить(НоваяГруппировка);
		
		Для Каждого ГруппыГруппировки Из МассивГрупп Цикл
			НовыйЭлементГруппировки = ПолучитьНовыйЭлементДерева("ЭлементГруппировки", Разделитель, 1);
			НовыйЭлементГруппировки.Вставить("Закрыта", Истина);
			НовыйЭлементГруппировки.Вставить("Элементы", ГруппыГруппировки);   
           	НоваяГруппировка.Элементы.Добавить(НовыйЭлементГруппировки);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ПодЭлемент Из ТекЭлемент.Элементы Цикл
		СгруппироватьДерево(ПодЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ДобавитьЭлементВДерево(Строка, НачальнаяПозиция, КонечнаяПозиция)
	Если ПустаяСтрока(Строка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйЭлемент = ПолучитьНовыйЭлементДерева("Элемент", Строка, НачальнаяПозиция);
	НовыйЭлемент.КонечнаяПозиция = КонечнаяПозиция;

	НачальнаяПозиция = КонечнаяПозиция + 1;  
	Строка = "";
	
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Функция ПолучитьНовыйЭлементДерева(Тип, Значение, НачальнаяПозиция)
	Возврат Новый Структура("Тип,Значение,Закрыта,Элементы,НачальнаяПозиция,КонечнаяПозиция,Выравнивание",
		Тип, 
		Значение, 
		Ложь,
		Новый Массив,
		НачальнаяПозиция,
		0,
		"Лево");
КонецФункции

&НаКлиенте
Функция ЭтоРазделитель(Символ, ОткрывающийСимвол)
	Если ОткрывающийСимвол = "<" Тогда
		Возврат СтрНайти("| ", Символ);
	КонецЕсли;

	Если ОткрывающийСимвол = "{" Тогда
		Возврат СтрНайти(";=", Символ);
	КонецЕсли;
	
	Возврат СтрНайти("#+|=", Символ);
КонецФункции   

&НаКлиенте
Функция ЭтоОткрывающийЭлемент(Символ)
	Возврат СтрНайти("[{(_<", Символ);
КонецФункции   

&НаКлиенте
Функция ЭтоКавычка(Символ)
	Возврат СтрНайти("""'", Символ);
КонецФункции  
&НаКлиенте
Функция ЭтоЗакрывающийЭлемент(Символ, ОткрывающийСимвол)
	Возврат Символ = ")" И ОткрывающийСимвол = "("
	    ИЛИ Символ = "]" И ОткрывающийСимвол = "["
		ИЛИ Символ = "_" И ОткрывающийСимвол = "_"
		ИЛИ Символ = ">" И ОткрывающийСимвол = "<"
		ИЛИ Символ = """" И ОткрывающийСимвол = """"
		ИЛИ Символ = "'" И ОткрывающийСимвол = "'"
		ИЛИ Символ = "}" И ОткрывающийСимвол = "{";
КонецФункции   

&НаКлиенте
Процедура ЗаполнитьТаблицу(НовоеСодержание, ТекущаяТаблица, МассивКолонки)
	Если ТекущаяТаблица = Неопределено Тогда
		ТекущаяТаблица = Новый Структура("Тип,Колонки,Строки,КолонкиУстановлены", "Таблица", Новый Массив, Новый Массив, Ложь);
		НовоеСодержание.Добавить(ТекущаяТаблица);
	КонецЕсли;
	
	Если НЕ ТекущаяТаблица.КолонкиУстановлены И ЭтоРазделительТаблицы(МассивКолонки) Тогда
		ТекущаяТаблица.КолонкиУстановлены = Истина;
		Возврат;
	КонецЕсли;

	Если НЕ ТекущаяТаблица.КолонкиУстановлены Тогда
		
		Для Каждого Колонка Из МассивКолонки Цикл
			ТекКолонка = Новый Структура("Тип,Заголовок,Колонки", "КолонкаТаблицы", Колонка, "", Новый Массив);	
			ТекущаяТаблица.Колонки.Добавить(ТекКолонка);
			
		КонецЦикла;		
	КонецЕсли;
	
	Строка = Новый Структура("Тип,Элементы", "СтрокаТаблицы", Новый Массив);
	Для Каждого Колонка Из МассивКолонки Цикл
		ТекКолонка = Новый Структура("Тип,Заголовок", "ЭлементСтрокиТаблицы", Колонка);	
		Строка.Элементы.Добавить(ТекКолонка);
	КонецЦикла;		
	ТекущаяТаблица.Строки.Добавить(Строка);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоРазделительТаблицы(МассивКолонки)
	Возврат СтрНачинаетсяС(СокрЛП(МассивКолонки[0]), "---");
КонецФункции

&НаКлиенте
Функция ДобавитьНовуюГруппу(ТекущаяГруппа, Содержание)
	ТекЭлемент = ДобавитьНовыйЭлемент(ТекущаяГруппа.Группа);
	ТекЭлемент.ТипЭлемента = "ГоризонтальнаяГруппаФормы";
	
	ТекЭлемент = ДобавитьНовыйЭлемент(ТекЭлемент);
	ТекЭлемент.ТипЭлемента = "ГруппаФормы";
	ТекЭлемент.Заголовок = Содержание;
	
	НоваяТекущаяГруппа = ПолучитьОписаниеТекущейГруппы(ТекЭлемент);
	Возврат НоваяТекущаяГруппа;
КонецФункции
&НаКлиенте
Функция ДобавитьТаблицуВГруппу(ТекущаяГруппа, МассивКолонокТаблицы)
	Таблица = ТекущаяГруппа.Таблица;
	
	МассивКолонок = Новый Массив;
	Если Таблица = Неопределено Тогда
		Таблица = ДобавитьНовыйЭлемент(ТекущаяГруппа.Группа);
		Таблица.ТипЭлемента = "ТаблицаФормы";
		
		Таблица.Вставить("Колонки", Новый Массив);
		Таблица.Вставить("КолонкиУстановлены", Ложь);
		Таблица.Вставить("Строки", Новый Массив);
		Таблица.Вставить("Подвал", Новый Массив);
	КонецЕсли;
	
	ЭтоРазделитель = СтрНачинаетсяС(СокрЛП(МассивКолонокТаблицы[0]), "---");
	МассивКолонок = ТекущаяГруппа.Колонки;
	
	Если НЕ Таблица.КолонкиУстановлены И ЭтоРазделитель Тогда
		Таблица.КолонкиУстановлены = Истина;
	ИначеЕсли НЕ Таблица.КолонкиУстановлены Тогда
		МассивКолонок = Новый Массив;
		Для Каждого Колонка Из МассивКолонокТаблицы Цикл
			ТекКолонка = Новый Структура("ТипЭлемента,Заголовок,Колонки", "КолонкаТаблицыФормы", Колонка, "", Новый Массив);	
			Таблица.Колонки.Добавить(ТекКолонка);
			МассивКолонок.Добавить(ТекКолонка);
		КонецЦикла;		
	Иначе 
		Строка = Новый Структура("ТипЭлемента,Элементы", "СтрокаТаблицыФормы", Новый Массив);
		Для Каждого Колонка Из МассивКолонокТаблицы Цикл
			ТекКолонка = Новый Структура("ТипЭлемента,Заголовок", "ЭлементТаблицыФормы", Колонка);	
			Строка.Элементы.Добавить(ТекКолонка);
		КонецЦикла;		
		Таблица.Строки.Добавить(Строка);
	КонецЕсли;

	НоваяТекущаяГруппа = ПолучитьОписаниеТекущейГруппы(ТекущаяГруппа.Группа);
	НоваяТекущаяГруппа.Таблица = Таблица;
	НоваяТекущаяГруппа.Колонки = МассивКолонок;
	Возврат НоваяТекущаяГруппа;
КонецФункции

&НаКлиенте
Функция ГруппаФорматировать()
	
КонецФункции

&НаКлиенте
Функция ГруппаВывести()
	
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеТекущейГруппы(Группа)
	Результат = Новый Структура("Группа,Таблица,Колонки", Группа, Неопределено, Новый Массив);
	Возврат Результат;
КонецФункции
// Текущие координаты
// МассивГрупп Группа - Таблица - Массив колонок

// Гр1
// Гр2 + Гр3 *
// Элемент *    

//Вертикально
//Группы - Горизонтально
//Элементы - Вертикально

//Группа 1
//	Подчиненные:
//		[Элемент, []

&НаКлиенте
Процедура ПодготовитьКСериализации(Данные)
	Данные.Удалить("Родитель");   
	Если Данные.Подчиненные.Количество() = 0 Тогда
		Данные.Удалить("Подчиненные");  
		Возврат;
	КонецЕсли;
	
	Если Данные.Свойство("Заголовок") Тогда
		Если ПустаяСтрока(Данные.Заголовок) Тогда
			Данные.Удалить("Заголовок");  
		Иначе
			Данные.Заголовок = СокрЛП(Данные.Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные.Подчиненные Цикл
		ПодготовитьКСериализации(Элемент);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиПредставлениеДереваНаСервере(Данные)
	Библиотека = Обработки.ктв_ПреобразованиеДанных.Создать();
	ПредставлениеJSON = Библиотека.ЗаписатьОписаниеОбъектаВJSON(Данные);
КонецПроцедуры

	// Группа - Группа - Группа - Таблица - Строка

&НаКлиенте
Функция ОбработатьЗначениеПереключателя(ТекЭлемент, Символ, Порядок)
	Если (НРег(Символ) = "х" или НРег(Символ) = "x") И ТекЭлемент.Заголовок = "" Тогда
		ТекЭлемент.Значение = Истина;
		Возврат ТекЭлемент;
	КонецЕсли;	

	Если Символ = ")" Тогда
		Возврат ТекЭлемент.Родитель;
	КонецЕсли;

	Если Символ = "|" Тогда
		ТекЭлемент.Родитель.Родитель.ВидПереключателя = "Тумблер";
		
		ТекЭлемент = ДобавитьНовыйЭлемент(ТекЭлемент);
		ТекЭлемент.ТипЭлемента = "ЗначениеПереключателя";
		ТекЭлемент.Вставить("Значение", Ложь);
		ТекЭлемент.Вставить("Заголовок", "");
		
		Возврат ТекЭлемент;
	КонецЕсли;
	
	ТекЭлемент.Заголовок = ТекЭлемент.Заголовок + Символ;
	ТекЭлемент.Родитель.Родитель.ВидПереключателя = "Тумблер";
	
	Возврат ТекЭлемент;
КонецФункции

&НаКлиенте
Функция ОбработатьПереключатель(ТекЭлемент, Символ, Порядок)
	ТекЭлемент.Заголовок = ТекЭлемент.Заголовок + Символ;
	
	Возврат ТекЭлемент;
КонецФункции

&НаКлиенте
Функция ДобавитьНовыйЭлемент(Родитель)
	Результат = Новый Структура("Заголовок, ТипЭлемента, Родитель, Подчиненные", "", "", Родитель, Новый Массив);
	Родитель.Подчиненные.Добавить(Результат);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура НачатьПостроениеНаСервере()    
	ГруппаКонтейнер = Элементы.Найти("ГруппаКонтейнер");
	Если ГруппаКонтейнер <> Неопределено Тогда
		Элементы.Удалить(ГруппаКонтейнер);
	КонецЕсли;

	ГруппаКонтейнер = Элементы.Добавить("ГруппаКонтейнер", Тип("ГруппаФормы"), Элементы.ГруппаПросмотр);
	ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтейнер.ОтображатьЗаголовок = ЛОЖЬ; 
	ГруппаКонтейнер.РастягиватьПоГоризонтали = Истина;
	ГруппаКонтейнер.РастягиватьПоВертикали = Истина;
	ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Данные = ДеревоЭлементов;
	
	ПараметрыВыполнения = Новый Структура("СвободныеНомераРеквизитов", Новый Структура);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Булево", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Строка", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Число", 1);
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Данные, ГруппаКонтейнер);
КонецПроцедуры

&НаСервере
Процедура ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Данные, Группа)      
	
	Подчиненные = Данные.ПолучитьЭлементы();
	
	Для Каждого ЭлементДанных Из Подчиненные Цикл
		Выполнена = Ложь;
		
		ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьТаблицу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ГоризонтальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ВертикальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НоваяГруппа.ОтображатьЗаголовок = ЭлементДанных.Свойства.ОтображатьЗаголовок; 
	НоваяГруппа.Заголовок = ЭлементДанных.Свойства.Заголовок;
	
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);   
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Надпись" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок = ЭлементДанных.Свойства.Заголовок;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];
	НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)     
	Если ЭлементДанных.Тип <> "ПолеВвода" Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита =  ПолучитьИмяРеквизита(ПараметрыВыполнения, "Строка");
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;
	НовыйЭлемент.Заголовок = ЭлементДанных.Свойства.Заголовок;

	Если ЭлементДанных.Свойства.Свойство("ЦветФона") Тогда
		НовыйЭлемент.ЦветФона = WebЦвета[ЭлементДанных.Свойства.ЦветФона];
	КонецЕсли;        

	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Свойства.Значение;    
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Флажок" Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита =  ПолучитьИмяРеквизита(ПараметрыВыполнения, "Булево");
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;
	НовыйЭлемент.Заголовок = ЭлементДанных.Свойства.Заголовок;
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[ЭлементДанных.Свойства.ПоложениеЗаголовка];
	
	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Свойства.Значение;  

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Таблица" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяТаблица = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ТаблицаФормы"), Группа);
	НоваяТаблица.ПутьКДанным = "ТабличныйРеквизит1";
	
	ПодэлементыТаблицы = ЭлементДанных.ПолучитьЭлементы();
	
	Колонки = Неопределено;
	Строки = Неопределено;
	
	Для Каждого ЭлементДерева Из ПодэлементыТаблицы Цикл
		Если ЭлементДерева.Тип = "Колонки" Тогда
			Колонки = ЭлементДерева.ПолучитьЭлементы();
		Иначе
			Строки = ЭлементДерева.ПолучитьЭлементы();
		КонецЕсли;
	КонецЦикла;
	
	Сч = 1;
	Для Каждого Колонка Из Колонки Цикл
		УИДЭлемента = Новый УникальныйИдентификатор;
		ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
		
		НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НоваяТаблица);
		НовыйКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НовыйКолонка.ПутьКДанным = "ТабличныйРеквизит1.СтроковаяКолонка" + Сч;
		НовыйКолонка.Заголовок = Колонка.Свойства.Заголовок;
		НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.Свойства.ГоризонтальноеПоложение];
		
		Сч = Сч  + 1;
	КонецЦикла;   
	
	Таблица = ТабличныйРеквизит1;
	Таблица.Очистить();
	Для Каждого Строка Из Строки Цикл 
		СтрокаТаблицы = Таблица.Добавить();
		Сч = 0;       
		
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ЭлементСтроки Из ЭлементыСтроки Цикл
			СтрокаТаблицы["СтроковаяКолонка" + (Сч +1)] = ЭлементСтроки.Свойства.Значение;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Дерево" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяТаблица = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ТаблицаФормы"), Группа);
	НоваяТаблица.ПутьКДанным = "ДеревоРеквизит1";
	
	ПодэлементыТаблицы = ЭлементДанных.ПолучитьЭлементы();
	
	Колонки = Неопределено;
	Строки = Неопределено;
	
	Для Каждого ЭлементДерева Из ПодэлементыТаблицы Цикл
		Если ЭлементДерева.Тип = "Колонки" Тогда
			Колонки = ЭлементДерева.ПолучитьЭлементы();
		Иначе
			Строки = ЭлементДерева;
		КонецЕсли;
	КонецЦикла;
	
	Сч = 1;
	Для Каждого Колонка Из Колонки Цикл
		УИДЭлемента = Новый УникальныйИдентификатор;
		ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
		
		НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НоваяТаблица);
		НовыйКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НовыйКолонка.ПутьКДанным = "ДеревоРеквизит1.СтроковаяКолонка" + Сч;
		НовыйКолонка.Заголовок = Колонка.Свойства.Заголовок;
		НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.Свойства.ГоризонтальноеПоложение];
		
		Сч = Сч  + 1;
	КонецЦикла;          
	
	ДеревоРеквизит1.ПолучитьЭлементы().Очистить(); 
	
	ДобавитьДеревоСтроки(Строки, ДеревоРеквизит1);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДеревоСтроки(ЭлементДанных, ЭлементДерева)
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	Строки = ЭлементДанных.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл 
		СтрокаТаблицы = ЭлементыДерева.Добавить();
		Сч = 0;       
		
		ЭлементыСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ЭлементСтроки Из ЭлементыСтроки Цикл
			Если ЭлементСтроки.Тип = "СтрокиТаблицы" Тогда
				ДобавитьДеревоСтроки(ЭлементСтроки, СтрокаТаблицы);
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы["СтроковаяКолонка" + (Сч +1)] = ЭлементСтроки.Свойства.Значение;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Страницы" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	ЭлементСтраницы = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	ЭлементСтраницы.Вид = ВидГруппыФормы.Страницы;
	ЭлементСтраницы.РастягиватьПоГоризонтали = Истина;
	ЭлементСтраницы.РастягиватьПоВертикали = Ложь;
	
	Страницы = ЭлементДанных.ПолучитьЭлементы();
	
	Для Каждого Страница Из Страницы Цикл
		УИДЭлементаСтраница = Новый УникальныйИдентификатор;
		ИмяЭлементаСтраница = "Элемент_" + СтрЗаменить(УИДЭлементаСтраница,"-","");
		
		ЭлементСтраница = Элементы.Добавить(ИмяЭлементаСтраница, Тип("ГруппаФормы"), ЭлементСтраницы);
		ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
		ЭлементСтраница.Заголовок = Страница.Свойства.Заголовок;
		
		ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Страница, ЭлементСтраница);
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "КоманднаяПанель" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяКоманднаяПанель = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ГруппаФормы"), Группа);
	НоваяКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	НоваяКоманднаяПанель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];

	Кнопки = ЭлементДанных.ПолучитьЭлементы();
	
	Для Каждого Кнопка Из Кнопки Цикл
		УИДЭлементаСтраница = Новый УникальныйИдентификатор;
		ИмяЭлементаСтраница = "Элемент_" + СтрЗаменить(УИДЭлементаСтраница,"-","");
		
		ЭлементКнопка = Элементы.Добавить(ИмяЭлементаСтраница, Тип("КнопкаФормы"), НоваяКоманднаяПанель);
		ЭлементКнопка.ИмяКоманды = "КомандаЗаглушка";
		ЭлементКнопка.Заголовок = Кнопка.Свойства.Заголовок;         
		
		Если ПустаяСтрока(Кнопка.Свойства.Заголовок) Тогда
			ЭлементКнопка.Отображение = ОтображениеКнопки.Картинка;
		Иначе
			ЭлементКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		ЭлементКнопка.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы[Кнопка.Свойства.ПоложениеКартинки];
		
		Если Кнопка.Свойства.Картинка <> Неопределено Тогда
			ЭлементКнопка.Картинка = БиблиотекаКартинок[Кнопка.Свойства.Картинка];
		КонецЕсли;        

		Если Кнопка.Свойства.Свойство("ЦветФона") Тогда
			ЭлементКнопка.ЦветФона = WebЦвета[Кнопка.Свойства.ЦветФона];
		КонецЕсли;        

		Если Кнопка.Свойства.Свойство("ЦветТекста") Тогда
			ЭлементКнопка.ЦветТекста = WebЦвета[Кнопка.Свойства.ЦветТекста];
		КонецЕсли;        
		
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРеквизита(ПараметрыВыполнения, Тип)
	СвободныйНомер = ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип];
	ИмяРеквизита = СтрШаблон("%1Реквизит%2", Тип, СвободныйНомер);
	ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип] = СвободныйНомер + 1;
	Возврат ИмяРеквизита;
КонецФункции

&НаКлиенте
Процедура ПостроитьЭлементы(Команда)
	Команда1(Неопределено);

	НачатьПостроениеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)  
	
КонецПроцедуры

&НаКлиенте
Функция НовыеПараметрыВыполнения(Элементы)
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ГоризонтальноеВыравнивание", "Лево");
	ПараметрыВыполнения.Вставить("ИндексТекущейСтроки", 0);
	ПараметрыВыполнения.Вставить("ОтключитьПереход", Ложь);
	ПараметрыВыполнения.Вставить("ВертикальныеГруппы", Истина);
	ПараметрыВыполнения.Вставить("Элементы", Элементы);
	
	Возврат ПараметрыВыполнения;
КонецФункции

&НаКлиенте
Процедура ДекомпозироватьЭлемент(ПараметрыВыполнения, ЭлементДерева, Отказ) 

КонецПроцедуры  

&НаКлиенте
Процедура СообщитьОбОшибкеПарсинга(Строка, Столбец, Сообщение, Отказ)
	Отказ = Истина;
	ТекстСообщения = СтрШаблон("%1 [%2, %3]", Сообщение, Строка, Столбец);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();  
	
	Элементы.Редактор.УстановитьГраницыВыделения(Строка, Столбец, Строка, Столбец + 1);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьГруппуИНадпись(Строка, Разделитель)
	Результат = Новый Структура("Группа,Надпись,ПерваяГруппа,Отказ,Позиция,Ошибка", Неопределено, Неопределено, Истина, Ложь, 1, "");
	
	СтрСтрока = РазобратьСтроку(Строка, Разделитель, Истина);
	
	Если СтрСтрока.Количество() > 2 Тогда
		Результат.Отказ = Истина;
		Результат.Позиция = 1;
		Результат.Ошибка = НСтр("ru = 'Лишние элементы в строке'");
		Возврат Результат;;
	КонецЕсли;
	
	Для Каждого Элемент Из СтрСтрока.Данные Цикл
		Если Элемент.Тип = "Группа" Тогда
			Результат.Группа = Элемент.Текст;
		Иначе
			Результат.Надпись = Элемент.Текст;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РазобратьСтроку(Строка, СимволГруппы, ЭтоРазделитель = Ложь)
	Результат = Новый Структура("Отказ,Позиция,Ошибка,Данные",Ложь, 1, "", Новый Массив);
	
	ТекЭлемент = Новый Структура("Тип,Текст", "Строка", "");
	
	Сч = 1;
	Пока Сч <= СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Сч , 1);  
		
		Если ЭтоКавычка(Символ) Тогда    
			ТекстВКавычках = ДобавитьТекстВКавычках(Строка, Сч + 1, Символ);
			
			Если ТекстВКавычках = Неопределено Тогда
				Результат.Отказ = Истина;
				Результат.Позиция = Сч;
				Результат.Ошибка = НСтр("ru = 'Не найдена закрывающая кавычка'");
				Возврат Результат;
			КонецЕсли;
			
			ТекЭлемент.Текст = ТекЭлемент.Текст + ТекстВКавычках;
			Сч = Сч + СтрДлина(ТекстВКавычках);
			Продолжить;
		КонецЕсли;
		
		ЭтоСимволГруппы = (Символ = СимволГруппы);  
		ЭтоЗакрывающийСимвол = НЕ ЭтоРазделитель И ЭтоЗакрывающийЭлемент(Символ, СимволГруппы);
		
		Если ЭтоСимволГруппы ИЛИ ЭтоЗакрывающийСимвол Тогда
			Если НЕ ПустаяСтрока(ТекЭлемент.Текст) 
				ИЛИ ЭтоРазделитель Тогда
				ТекЭлемент.Текст = СтрокаБезКавычек(ТекЭлемент.Текст);
				Результат.Данные.Добавить(ТекЭлемент);
			КонецЕсли;
			
			Тип = ?(ЭтоРазделитель ИЛИ ЭтоЗакрывающийСимвол, "Строка", "Группа");
			
			ТекЭлемент = Новый Структура("Тип,Текст", Тип, "");
			Сч = Сч + 1;     
			
			Продолжить;
		КонецЕсли;

		ТекЭлемент.Текст = ТекЭлемент.Текст + Символ;
		
		Сч = Сч + 1;
	КонецЦикла;	
	
	Если НЕ ПустаяСтрока(ТекЭлемент.Текст) 
		ИЛИ ЭтоРазделитель Тогда
		ТекЭлемент.Текст = СтрокаБезКавычек(ТекЭлемент.Текст);
		Результат.Данные.Добавить(ТекЭлемент);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

////[ ] Данные:  >|< Фамилия | Имя | Отчество >|
////[ ] Имя:  {Видимость-, }   >|< ----                     >|

//Группа:
//    *  + *
//	 [ ] Флажок 1 * : Плейсхолдер
//	+ Имя:       1 * |ffds | dfsfsd| fsdfsdf|
//	  Фамилия:   1  * |fdfdsfs| fsdfsdf| fdsfsdf| 
//	* <ОК>       1  
//	              
//	|///page 3|
//	Фамилия*:  |          | |fdsfs|fsdfda|dfsfa|Ссылка|
//	Имя:       |          | |---|---|---|---|
//	Отчество   |          | |fsf|dsfsdaf|sdfaf|
//	---
//	+ <ОК> <Отмена>
//	
//	|fsdfadf=fsdf|fsffsdf=fsdfsdf|
//	|dfsdfsff=a|dsfsdf=saf|
//	

// 
// аыывафва
// 

// ***Поле ввода***
// Поле ввода: ____

// ***Поле выбора***
// Поле ввода: ____...

// ***Поле выбора из списка***
// Поле ввода: ____V

// ***Поле календаря***
// Поле ввода: ____1

// ***Многострочное поле***
// Поле ввода: ____
//             ____
//             ____

// ***Поле надписи***
// "Надпись: http:\\"

// ***Поле надписи***
// 'Надпись'

// ***Поле надписи***
// Надпись

// ***Поле флажка***
// [ ] Надпись
// ***Поле флажка***
// [X] Надпись

// ***Поле переключателя***
// (Вариант 1|Вариант 2)

// ***Поле переключателя (тумблер)***
// <(Вариант 1|Вариант 2)>

// ***Кнопка***
// <ОК>

// ***Командная панель***
// <+|- fff|fdfdsf>

//.\ТЕкст 1........
//               .
//...    .       . 
//       .       .  
//.Текст 2........
//               .       |
//Текст 2........ .......|
//------------------------
// ..Заголовок..Заголовок.
// [X] Надпись . [X] Надпись

// ..       .. 
// ..Группа ..
// .Надпиьсь .
// ...........       

//:_2024_V *:_Преподаватель_ох | :_Результат деятельности_ОX | [] На проверке 

//** **
//Дата       |Название        *Результат деятельности: _Руководство статьей студента_О
//-----------|--------------  *Замена: __О
//01.10.2024 |Основные теории *Название: Основные теории происхождения государства и права
//           |                *Сотрудник      |Принять к учету |Уровень
//			 |      		  *---------------|----------------|-------------------
//			 |      		  *Колоткина О.А. |[]              |(8)[https:\\fff.ru]
//			 |      		  *---------------|----------------|-------------------
//			 |      		  *Студент: Невьянцева А.В.
//			 |      		  *Дополнительная информация: Невьянцева А.В.
//			 |      		  *Дубликаты                     |Тип                  |Дата      *
//			 |      		  *------------------------------|---------------------|----------*
//			 |      		  *Основные теории происхождения |Статья в журнале ВАК |01.10.2024*
//			 |      		  *------------------------------|---------------------|----------*
//			 |      		  *<Записать> <Подробнее>
//			 |      		  *Файлы  |
//			 |      		  *-------|
//			 |      		  *Файл 1 |
//			 |      		  *-------|
//			 |      		  *:_|Комментарий_
//			 |      		  * ______________
//-----------|----------------*<Согласовать {ЦветФона=Зеленый}> <На доработку {ЦветФона=Желтый}> <Отклонить {ЦветФона=Красный}>*
//**************************** ********************************

// Групп
//   *
//   *

// Группа с заголовком
//**Заголовок *
//            *

// Две вертикальные группы (без выравнивания)
//*   *
//    *
//
//**Заголовок*

// Две вертикальные группы (с выравниванием)
//*   *
//    *
//**Заголовок*

// Две вложенные группы
//*        *
//         *
//***Текст *
//* *
//***Текст *
//* *

// Станицы
// **/Страница 1*
// * *
// **/Старница 2*
// * *

// Привязка справа и снизу
//  * 

//
//}*           

//Группа 1                              +Группа 2
//Колонка 1                   ||Колонка  *Элемент группы 2
//|Колонка 1                   |Колонка 2*Элемент группы 2
//---|---                                * 
//Текста в колонке 1 | Текста в колонке 2* 

//Поле: _____
//      _____
//	    __*__
           
//Поле: _аыва__
//      _аыва__
//	    _аыва__

//Группа                         +
//Однострочная + Еще одна строка #
//-----        # -----           #

//+ 
//!"№;%:?*()_+,./\/

////:_2024_V *:_Преподаватель_ох + :_Результат деятельности_ОX + [] На проверке 

////Дата       |Название        #Результат деятельности: _Руководство статьей студента_О
////-----------|--------------  #Замена: __О
////01.10.2024 |Основные теории #Название: Основные теории происхождения государства и права
////           |                #Сотрудник      |Принять к учету |Уровень
////			 |      		  #---------------|----------------|-------------------
////			 |      		  #Колоткина О.А. |[]              |(8)[https:\\fff.ru]
////			 |      		  #---------------|----------------|-------------------
////			 |      		  #Студент: Невьянцева А.В.
////			 |      		  #Дополнительная информация: Невьянцева А.В.
////			 |      		  #Дубликаты                     |Тип                  |Дата      #
////			 |      		  #------------------------------|---------------------|----------#
////			 |      		  #Основные теории происхождения |Статья в журнале ВАК |01.10.2024#
////			 |      		  #------------------------------|---------------------|----------#
////			 |      		  #<Записать> <Подробнее>
////			 |      		  #Файлы  |
////			 |      		  #-------|
////			 |      		  #Файл 1 |
////			 |      		  #-------|
////			 |      		  #:_|Комментарий_
////			 |      		  # ______________
////-----------|----------------#<Согласовать {ЦветФона=Зеленый}> <На доработку {ЦветФона=Желтый}> <Отклонить {ЦветФона=Красный}>#
////---#---# ################################                

////+/Заголовок               ++/
////Однострочное поле + Новое #
////#---#

////##Страница #/
//////+/Заголовок

//+Подгруппа1       +Подгруппа 2                                 
//Поле ввода в пг 1 # Однострочная группа: + Однострочная группа 
//---               #Еще какое-то поле                           

// +/Заголовки - страница
// ++Заголовок
// #+ Без заголовка

						//+
//Поле ввода: _123_       #Заголовок   | Заголовок2 
//__                      # ------------|------------
//                        #Текст 1     |          
// [ ] Текст              #Текст 1     |           
// аваыва                 #Текст 2     |           
//                        #Текст 3     |           
//           /2           #            |           
//           +            #            |           

//Поле: Значение поля + Другая группа 
//Надпись                    # Ячейка 2 
//Колонка 1 |  Колонка 2 # Ячейка 
//--- |  --- # Ячейка 
//Строка 1 Ячейка 1 |  Строка 1 Ячейка 2 # Ячейка 
//Строка 2 Ячейка 1 |  Строка 2 Ячейка 2 # Ячейка 123

//Надпись однострочной группы 1 + Надпись однострочной группы 2
//1:1 # 2:1

//Надпись однострочной группы 1 + Надпись однострочной группы 2

///Страница 1
//Надпись на странице 1

///Страница 2
//Надпись на странице 2
//<...>
//Колонка 1|Колонка 2

//---|---
//х Ячейка 1|Ячейка 2
//хх Ячейка 1|Ячейка 2

//Колонка 1    |Колонка 2
//---          |---
//Строка 1     |Строка 2
//.Подстрока 1 |Подстрока 2
//..Подстрока 1|Подстрока 2
//.Подстрока 2 |Подстрока 2          

// Группы
// Страницы
// Таблицы

// Что-то | Что-то
// {Что-то}              

// # | + |

//</ававыаыв"@Записать Согласовать" {ЦветФона=Зеленый;ЦветТекста=Белый} "На доработку" {ЦветФона=Желтый} Отклонить {ЦветФона=Красный}>
//Таблица 1 | "Таблица 2"
//---: | ---: 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff

//Таблица 1 | "Таблица 2" 
//---: | ---: 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff 
//fff | fff

// Правило 
// 1. {    - последняя группа
// 2. :    - разделитель
// 3  [    - первая группа
// 3  [    - последняя группа
// 3  <    - первая и последняя группа

// >- { ; = 
// >- 
//  
// { Правило = ">-", }

// 1. Выделяем выравнивание
// 2. Выделяем свойства в конце
// 3. Разделяем на подгруппы
// 3. Определяем свойства подгрупп

// Обрамление Лево-Право
// Разделитель ключ-значение
// Разделитель групп

&НаКлиенте
Процедура ДекомпозироватьПолеВвода(ПараметрыВыполнения, ЭлементДерева, Выполнена, Отказ); 
	ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);

	СтрЭлемента = ДекомпозироватьСвойства(ОписаниеЭлемента);

	СтрПолеВвода = ПолучитьКлючЗначениеТекста(СтрЭлемента.Текст, ":");
	
	Если НЕ СтрПолеВвода.Найден Тогда
		Возврат;
	КонецЕсли;

	Выполнена = Истина;
	
	НовыйЭлемент = ПолучитьОписаниеПолеВвода(ЭлементДерева);
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(СтрПолеВвода.Ключ);
	НовыйЭлемент.Свойства.Значение = СокрЛП(СтрПолеВвода.Значение);;
	
	Для Каждого КлючЗначение Из СтрЭлемента.Свойства Цикл
		НовыйЭлемент.Свойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
			
	НовыйЭлемент.Представление = СокрЛП(СтрПолеВвода.Ключ);

	Выполнена = Истина;
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура Команда2(Команда)    
	МассивСтрок = СтрРазделить(Редактор, Символы.ПС);
	
	ДанныеГрупп = ПарсингГрупп(МассивСтрок);
	
	Для Каждого Группа Из ДанныеГрупп Цикл
		
	КонецЦикла;

	ВывестиПредставлениеДереваНаСервере(ДанныеГрупп);
	
КонецПроцедуры
	
//	
//	< Меню | "Отмена">
//< ..Подменю |    >
//< .. |           >
//< fff + ffff |   >

// Структура строки

// -> <Кнопка 1 {Свойство=Значение}| Кнопка 2 | Кнопка 3 > <-
// -> [] Флажок {Свойство=Значение} <-
// -> Флажок [] {Свойство=Значение} <-
// -> Поле ввода: __Значение__.1VX^ {Свойство=Значение} <-
// ____
// -> Надпись {Свойство=Значение} <-
// -> (Опция 1 | Опция 2 | Опция 3) Заголовок {Свойство=Значение} <-
// Колонка 1 | Колонка 2

// /Заголовок группы {Свойство=Значение} +

// {Свойство=Значение}
// /Страница {Свойство=Значение}
// /Страница
// ---  окончание групы

// Группа - Новая группа - Страница
// Группа - Страница  

// 1. Выделяем группы, новые группы
// 2. Выделяем свойства страниц (начинается с {)
// 3. Выделяем страницы (начинается с /)
// 4. Выделяем кнопки (начинается с <)
// 5. Выделяем флажки (начинается на [)
// 6. Выделяем опции  (начинается на ()
// 7. Выделяем поля ввода (содержит :)
// 8. Выделяем таблицы (содержит |)
// 9. Выделяем надписи

#Область РаботаСТекстом

&НаКлиенте
Функция НовыйТекст(Значение, Верх, Лево)
	Результат = Новый Структура("Значение,Координаты", Значение, Новый массив);
	Результат.Координаты.Добавить(НовыеКоординаты(Верх, Лево));
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыеКоординаты(Верх, Лево)
	Возврат Новый Структура("Верх,Лево", Верх, Лево);
КонецФункции

&НаКлиенте
Функция ТекстЛев(Текст, ЧислоСимволов)
	Возврат НовыйТекст(Лев(Текст.Значение, ЧислоСимволов), Текст.Координаты[0].Верх, Текст.Координаты[0].Лево);
КонецФункции

&НаКлиенте
Функция ТекстНачинаетсяС(Текст, СтрокаПоиска)
	Возврат СтрНачинаетсяС(СокрЛ(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстЗаканчиваетсяНа(Текст, СтрокаПоиска)
	Возврат СтрЗаканчиваетсяНа(СокрП(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстСред(Текст, НачальныйНомер, ЧислоСимволов = Неопределено)  
	Если ЧислоСимволов = Неопределено Тогда
		Строка = Сред(Текст.Значение, НачальныйНомер);
	Иначе
		Строка = Сред(Текст.Значение, НачальныйНомер, ЧислоСимволов);
	КонецЕсли;
	Возврат НовыйТекст(Строка, Текст.Координаты[0].Верх, Текст.Координаты[0].Лево + НачальныйНомер - 1);
КонецФункции  

&НаКлиенте
Функция ТекстДлина(Текст)
	Возврат СтрДлина(Текст.Значение);
КонецФункции

&НаКлиенте
Процедура ТекстДобавить(Текст, ДобавляемыйТекст)
	Текст.Значение = Текст.Значение + Символы.ПС + ДобавляемыйТекст.Значение;
	
	Для Каждого Координата Из ДобавляемыйТекст.Координаты Цикл
		Текст.Координаты.Добавить(Координата);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СтрНайтиСЭкранированием(Строка, ПодстрокаПоиска, Направление = "СНачала")
	НомерВхождения = 1;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска[Направление], , НомерВхождения);	
		НомерВхождения = НомерВхождения + 1;
		
		Если Направление = "СНачала" Тогда
			Подстрока = Лев(Строка, Позиция);
		Иначе
			Подстрока = Сред(Строка, Позиция);
		КонецЕсли;

		Если Позиция = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, """") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, "'") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;   
		
		Возврат Позиция;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьКлючЗначениеТекста(Знач Текст, Разделитель, Направление = "СНачала")
	Результат = Новый Структура("Значение,Ключ,Найден", Текст, "", Ложь);
	
	Позиция = СтрНайтиСЭкранированием(Текст.Значение, Разделитель, Направление);
	
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Ключ =  ТекстЛев(Текст, Позиция - 1);
	Результат.Значение = ТекстСред(Текст, Позиция + СтрДлина(Разделитель));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПодгруппыСтроки(Знач Строка, Разделитель)
	Результат = Новый Массив;
	
	Пока Истина Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Строка, Разделитель);
		Если НЕ СтрКлючЗначение.Найден Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СтрКлючЗначение.Ключ);
		
		Строка = СтрКлючЗначение.Значение;
	КонецЦикла;

	Результат.Добавить(Строка);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ВыделитьНачальныйКонечныйСимволы(Текст, НачальныеСимволы = Неопределено, КонечныеСимволы = Неопределено)
	Результат = Новый Структура("Текст,ЕстьНачальный,ЕстьКонечный", Текст, Ложь, Ложь);
	
	ТекТекст = Текст;
	
	Если НачальныеСимволы <> Неопределено И ТекстНачинаетсяС(ТекТекст, НачальныеСимволы) Тогда  
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, Неопределено, НачальныеСимволы, "СНачала");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьНачальный = Истина;
			ТекТекст = ГруппаСтроки.Текст;
		КонецЕсли;
	КонецЕсли;   
	
	Если КонечныеСимволы <> Неопределено И ТекстЗаканчиваетсяНа(ТекТекст, КонечныеСимволы) Тогда   
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, КонечныеСимволы, Неопределено, "СКонца");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьКонечный = Истина;
			ТекТекст = ГруппаСтроки.Текст;			
		КонецЕсли;
	КонецЕсли;

	Результат.Текст = ТекТекст;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьГруппуСтроки(Текст, Открывающая, Закрывающая, Направление = "СНачала")
	Строка = СокрЛП(Строка);
	
	Результат = Новый Структура("Текст,Группа,Найден", Текст, "", Ложь);

	Если Открывающая <> Неопределено И Направление = "СНачала" И НЕ ТекстНачинаетсяС(Текст, Открывающая) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если Закрывающая <> Неопределено И Направление = "СКонца" И НЕ ТекстЗаканчиваетсяНа(Текст, Закрывающая) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если Направление = "СНачала" Тогда    
		Если Открывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Открывающая, Направление);
			Результат.Текст = КЗСтроки.Значение;
		КонецЕсли;
		
		Разделитель = Закрывающая;

		ПолеГруппа = "Ключ";
		ПолеСтрока = "Значение";
	Иначе
		Если Закрывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Закрывающая, Направление);
			Результат.Текст = КЗСтроки.Ключ;
		КонецЕсли;
		
		Разделитель = Открывающая;
		
		ПолеГруппа = "Значение";
		ПолеСтрока = "Ключ";
	КонецЕсли;
	
	СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Результат.Текст, Разделитель, Направление);
	Если НЕ СтрКлючЗначение.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Текст = СтрКлючЗначение[ПолеСтрока];
	Результат.Группа = СтрКлючЗначение[ПолеГруппа];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти   

#Область ПарсингГрупп

&НаКлиенте
Функция ПарсингГрупп(МассивСтрок)
	ПараметрыВыполнения = Новый Структура("Группы,Форма", Новый Массив, Новый Массив);
	ПараметрыВыполнения.Группы.Добавить(ПараметрыВыполнения.Форма);
	
	НомерСтроки = 1;
	Для Каждого Строка Из МассивСтрок Цикл
		Текст = НовыйТекст(Строка, НомерСтроки, 1);
		ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ПараметрыВыполнения.Форма;
КонецФункции

&НаКлиенте
Процедура ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст)
	ТекущиеГруппы = Новый Массив;
	
	Если ПустаяСтрока(Текст.Значение) Тогда
		ПараметрыВыполнения.Группы.Очистить();
		ПараметрыВыполнения.Группы.Добавить(ПараметрыВыполнения.Форма);
		Возврат;
	КонецЕсли;
	
	Группы = ПолучитьПодгруппыСтроки(Текст, "#");        

	Сч = 0;
	Для Сч = 0 По Группы.ВГраница() Цикл
		Группа = Группы[Сч];
		ПрошлаяГруппа = ПараметрыВыполнения.Группы[Сч];
		ПарсингДобавляемыхГрупп(ТекущиеГруппы, Группа, ПрошлаяГруппа);
	КонецЦикла;
	
	ПараметрыВыполнения.Группы = ТекущиеГруппы;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингДобавляемыхГрупп(ТекущиеГруппы, Группа, ПрошлаяГруппа)
	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(Группа, "+");

	Если ДобавляемыеГруппы.Количество() <= 1 Тогда
		Если ПрошлаяГруппа.Количество() > 0 Тогда
			ТекТекст = ПрошлаяГруппа[ПрошлаяГруппа.ВГраница()];
			ТекстДобавить(ТекТекст, Группа);
		Иначе
			ПрошлаяГруппа.Добавить(Группа);
		КонецЕсли;
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		Возврат;
	КонецЕсли;
	
	МассивДобавляемыеГруппы = Новый Массив;
	ПрошлаяГруппа.Добавить(МассивДобавляемыеГруппы);
	
	Для Каждого ДобавляемаяГруппа Из ДобавляемыеГруппы Цикл
		МассивДобавляемаяГруппа = ЗначениеВМассиве(ДобавляемаяГруппа);
		
		ТекущиеГруппы.Добавить(МассивДобавляемаяГруппа);
		МассивДобавляемыеГруппы.Добавить(МассивДобавляемаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарсингВертикальнойГруппы(ДанныеГруппы)         
	
	Если ТипЗнч(ДанныеГруппы) <> Тип("Массив") Тогда
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДекомпозироватьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДерева, Отказ)         
	ОписаниеЭлемента = ПараметрыВыполнения_ПолучитьОписаниеТекущейСтроки(ПараметрыВыполнения);
	
	Если ТипЗнч(ОписаниеЭлемента) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;

	НовыйЭлементДерева = ПолучитьОписаниеГоризонтальнойГруппы(ЭлементДерева.ПолучитьЭлементы());      
	
	ТекЭлементы = ОписаниеЭлемента;

	ПараметрыВыполненияПотомки = НовыеПараметрыВыполнения(ТекЭлементы);
	ПараметрыВыполненияПотомки.ВертикальныеГруппы = Истина;

КонецПроцедуры

#КонецОбласти

#Область РазборСтрочныхЭлементов

&НаКлиенте
Функция ПарсингСвойств(ПараметрыВыполнения, Свойства, Текст) 
    Результат = Текст;
	
	СтрСвойства = ПолучитьГруппуСтроки(Текст, "{", "}", "СКонца");
	
	Если НЕ СтрСвойства.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрСвойства.Текст;
	
	МассивСвойства = ПолучитьПодгруппыСтроки(СтрСвойства.Группа, ";");        

	Для Каждого Свойство Из МассивСвойства Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Свойство, "=");
		ИмяСвойства = СтрКлючЗначение.Ключ.Значение;
		ЗначениеСвойства = СтрКлючЗначение.Значение.Значение;
		Свойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции    

&НаКлиенте
Процедура ЗаполнитьСвойства(ПараметрыВыполнения, Элемент)
	Для Каждого КлючЗначение Из ПараметрыВыполнения.Свойства Цикл
		Элемент.Свойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	
	
	ПараметрыВыполнения.Свойства = Новый Структура;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЭлемента(Тип)  
	Результат = Новый Структура;
	Результат.Вставить("Тип", Тип);
	Результат.Вставить("Свойства", Новый Структура);
	Результат.Вставить("Координаты", Новый Массив);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстСКартинкой(Строка)
	Результат = Новый Структура("Текст,Картинка,ПоложениеКартинки", Строка, Неопределено, "Лево");
	
	МассивПодстрок = СтрРазделить(Строка, " ");
	Если МассивПодстрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Если СтрНачинаетсяС(МассивПодстрок[0],"@") Тогда
		Результат.Картинка = Сред(МассивПодстрок[0], 2);
		МассивПодстрок.Удалить(0);

		Результат.Текст = СтрСоединить(МассивПодстрок, " ");
	ИначеЕсли СтрНачинаетсяС(МассивПодстрок[МассивПодстрок.ВГраница()],"@") Тогда
		Результат.Картинка = Сред(МассивПодстрок[МассивПодстрок.ВГраница()], 2);
		МассивПодстрок.Удалить(МассивПодстрок.ВГраница());

		Результат.Текст = СтрСоединить(МассивПодстрок, " ");
		Результат.ПоложениеКартинки = "Право";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингСтрочныхЭлементов(ПараметрыВыполнения, Родитель, Знач Текст)   
// 4. Выделяем кнопки (начинается с <)
// 6. Выделяем опции  (начинается на ()
// 7. Выделяем поля ввода (содержит :)
// 8. Выделяем таблицы (содержит |)
// 5. Выделяем флажки (начинается на [)
// 9. Выделяем надписи         

	Выполнена = Ложь;
	
	СтрРасположение = ВыделитьНачальныйКонечныйСимволы(Текст, "->", "<-");
	Текст = СтрРасположение.Текст;
	Если СтрРасположение.ЕстьНачальный И СтрРасположение.ЕстьКонечный Тогда
		 ПараметрыВыполнения.Свойства.Вставить("ГоризонтальноеПоложение", "Центр");
	ИначеЕсли СтрРасположение.ЕстьНачальный Тогда
		ПараметрыВыполнения.Свойства.Вставить("ГоризонтальноеПоложение", "Право");
	КонецЕсли;
	
	ТекстБезСвойств = ПарсингСвойств(ПараметрыВыполнения, ПараметрыВыполнения.Свойства, Текст);
	
	ПарсингКоманднойПанели(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингТаблицы(ПараметрыВыполнения, Родитель, Текст, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингПоляВвода(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПарсингФлажкаЛевый(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПарсингФлажкаПравый(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингНадписи(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеКнопки(КоманднаяПанель)  
	Результат = ПолучитьОписаниеЭлемента("Кнопка");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("Картинка", Неопределено);
	Результат.Свойства.Вставить("ПоложениеКартинки", "Лево");
	КоманднаяПанель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

#Область ПарсингКоманднойПанели

&НаКлиенте
Функция ПолучитьОписаниеКоманднойПанели()  
	Результат = ПолучитьОписаниеЭлемента("КоманднаяПанель"); 
	Результат.Свойства.Вставить("ГоризонтальноеПоложение", "Лево");
	Результат.Вставить("Элементы", Новый Массив);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингКоманднойПанели(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстНачинаетсяС(Текст, "<") Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);

	Если НЕ ТекстЗаканчиваетсяНа(Текст, ">") Тогда
		 // Ошибка
	КонецЕсли;
	
	Содержимое = ВыделитьНачальныйКонечныйСимволы(Текст, "<", ">");
	Текст = Содержимое.Текст;
	
	Кнопки = ПолучитьПодгруппыСтроки(Текст, "|");
	
	НоваяКоманднаяПанель = ПолучитьОписаниеКоманднойПанели();
	ПараметрыВыполнения.КоманднаяПанель = НоваяКоманднаяПанель;     
	
	ЗаполнитьСвойства(ПараметрыВыполнения, НоваяКоманднаяПанель);

	Для Каждого ОписаниеКнопки Из Кнопки Цикл   
		ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, НоваяКоманднаяПанель, ОписаниеКнопки);
	КонецЦикла;

	Выполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, Родитель, Знач Текст) 
	НоваяКнопка = ПолучитьОписаниеКнопки(Родитель); 

    Текст = ПарсингСвойств(ПараметрыВыполнения, НоваяКнопка.Свойства, Текст);
	НоваяКнопка.Свойства.Заголовок = СокрЛП(Текст.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель)
	Если ПараметрыВыполнения.КоманднаяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Родитель.Элементы.Добавить(ПараметрыВыполнения.КоманднаяПанель);
	ПараметрыВыполнения.КоманднаяПанель = Неопределено; 
КонецПроцедуры

#КонецОбласти 

#Область ПарсингФлажка

&НаКлиенте
Функция ПолучитьОписаниеФлажка(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Флажок");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("Значение", Ложь);
	Результат.Свойства.Вставить("ПоложениеЗаголовка", "Право");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
	
КонецФункции 
 
&НаКлиенте
Процедура ПарсингФлажкаЛевый(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстНачинаетсяС(Текст, "[") Тогда
		 Возврат;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
КонецПроцедуры

&НаКлиенте
Процедура ПарсингФлажкаПравый(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстЗаканчиваетсяНа(Текст, "]") Тогда
		 Возврат;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СКонца");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Лево");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПарсингаФлажка(РезультатПарсинга, ПоложениеЗаголовка) 
	Результат = Новый Структура("ПоложениеЗаголовка,Заголовок,Значение");
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовка;
	Результат.Заголовок = РезультатПарсинга.Текст;
	Результат.Значение = НЕ ПустаяСтрока(РезультатПарсинга.Группа.Значение);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеФлажка(Родитель);
	НовыйЭлемент.Свойства.ПоложениеЗаголовка = ПараметрыПарсинга.ПоложениеЗаголовка;
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
	НовыйЭлемент.Свойства.Значение = ПараметрыПарсинга.Значение;
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти

 #Область ПарсингТаблицы
 
&НаКлиенте
Функция ПолучитьОписаниеТаблицы(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("Таблица"); 
	Результат.Вставить("Колонки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	
	Родитель.Элементы.Добавить(Результат);

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКолонкиТаблицы(Родитель)   
	Результат = ПолучитьОписаниеЭлемента("КолонкаТаблицы"); 
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Родитель.Колонки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрокиТаблицы(Родитель)
	Результат = ПолучитьОписаниеЭлемента("СтрокаТаблицы"); 
	Результат.Вставить("Ячейки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	Родитель.Строки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы)
	Результат = ПолучитьОписаниеЭлемента("ЯчейкаТаблицы"); 
	Результат.Вставить("Значение", "");
	
	СтрокаТаблицы.Ячейки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

 &НаКлиенте
Процедура ПарсингТаблицы(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Колонки = ПолучитьПодгруппыСтроки(Текст, "|");
	
	Если Колонки.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;       
	
	Таблица = ПараметрыВыполнения.Таблица;
	Если Таблица = Неопределено Тогда
		Таблица = ПолучитьОписаниеТаблицы(Родитель);
		ПараметрыВыполнения.Таблица = Таблица;
	КонецЕсли;
	
	ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;    
	
	ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);	
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;          
	
	ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;  	
 
	Выполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКолонка Из Колонки Цикл
		НовыйЭлемент = ПолучитьОписаниеКолонкиТаблицы(Таблица);
		
    	Текст = ПарсингСвойств(ПараметрыВыполнения, НовыйЭлемент.Свойства, ЭлементКолонка);
		НовыйЭлемент.Свойства.Заголовок = СокрЛП(Текст.Значение);  
	КонецЦикла;
	Выполнена = Истина;
КонецПроцедуры   

&НаКлиенте
Функция ЭтоКонечныйЭлементТаблицы(Знач Значение)
	Значение = СокрЛП(Значение);
	
	Если СтрНачинаетсяС(Значение, ":") Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;

	Если СтрЗаканчиваетсяНа(Значение, ":") Тогда
		Значение = Сред(Значение, 1, СтрДлина(Значение) - 1);
	КонецЕсли;
	
	Возврат ЭтоКонечныйЭлемент(Значение);
КонецФункции

&НаКлиенте
Процедура ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;      
	МассивГоризонтальноеПоложение = Новый Массив;
	Для Каждого ЭлементКолонка Из Колонки Цикл
		Содержимое = ВыделитьНачальныйКонечныйСимволы(ЭлементКолонка, ":", ":");
		Текст = Содержимое.Текст;
		
		Если НЕ ЭтоКонечныйЭлемент(Текст.Значение) Тогда
			Возврат;
		КонецЕсли;                               
		
		Если Содержимое.ЕстьНачальный И Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Центр")
		ИначеЕсли Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Право")
		Иначе
			МассивГоризонтальноеПоложение.Добавить("Лево")
		КонецЕсли;
	КонецЦикла;

	Сч = 0;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Сч > МассивГоризонтальноеПоложение.ВГраница()  Тогда
			Прервать;
		КонецЕсли;
		Колонка.Свойства.Вставить("ГоризонтальноеПоложение", МассивГоризонтальноеПоложение[Сч]);
		Сч = Сч + 1;
	КонецЦикла;   
	
	ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Истина;
	
	Выполнена = Истина;
КонецПроцедуры
 
&НаКлиенте
Функция ВыделитьУровеньИзЯчейкиТаблицы(Знач Текст)
	Результат = Новый Структура("Текст,Уровень", Текст, 0);
	
	Пока Истина Цикл
		СтрУровень = ВыделитьНачальныйКонечныйСимволы(Результат.Текст, ".", Неопределено);
		Если НЕ СтрУровень.ЕстьНачальный Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Уровень = Результат.Уровень + 1;
		Результат.Текст = СтрУровень.Текст;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Знач Текст) 
	Результат = Новый Структура("СтрокаТаблицы,Уровень,Текст");
	
	СтрУровень = ВыделитьУровеньИзЯчейкиТаблицы(Текст);  
	
	Результат.Текст = СтрУровень.Текст;
	Результат.Уровень = СтрУровень.Уровень;
	
	Таблица = ПараметрыВыполнения.Таблица;

	Если СтрУровень.Уровень = 0 Тогда
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(Таблица);
	Иначе
		ТекРодитель = ПараметрыВыполнения.ТаблицаИерархия[СтрУровень.Уровень - 1];
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(ТекРодитель);
	КонецЕсли;             
	
	Иерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		Иерархия.Добавить(ПараметрыВыполнения.ТаблицаИерархия[СчРодители]);
	КонецЦикла;
	Иерархия.Добавить(Результат.СтрокаТаблицы);
	ПараметрыВыполнения.ТаблицаИерархия = Иерархия;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингЯчейкиТаблицы(ПараметрыВыполнения, СтрокаТаблицы, Текст)
	
	НоваяЯчейка = ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы);
	
	Текст = ПарсингСвойств(ПараметрыВыполнения, НоваяЯчейка.Свойства, Текст);
	НоваяЯчейка.Значение = СокрЛП(Текст.Значение);  	
КонецПроцедуры

&НаКлиенте
Процедура ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	Если НЕ ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;   

	СтрокаТаблицы = Неопределено;
	
	ПерваяКолонка = Истина;
	Для Каждого ЭлементКолонка Из Колонки Цикл
		Текст = ЭлементКолонка;
		Если ПерваяКолонка Тогда
			ДанныеСтрокаТаблицы = ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Текст);
			СтрокаТаблицы = ДанныеСтрокаТаблицы.СтрокаТаблицы;
			
			Если ДанныеСтрокаТаблицы.Уровень > 0 Тогда
				Таблица.Тип = "Дерево";
			КонецЕсли;
			
			Текст = ДанныеСтрокаТаблицы.Текст;
			
			ПерваяКолонка = Ложь;
		КонецЕсли;
		
		ПарсингЯчейкиТаблицы(ПараметрыВыполнения, СтрокаТаблицы, Текст);
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

 #КонецОбласти

#Область ПарсингПоляВвода

&НаКлиенте
Функция ПолучитьОписаниеПоляВвода(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("ПолеВвода");
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Значение", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Процедура ПарсингПоляВвода(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	КлючЗначение = ПолучитьКлючЗначениеТекста(Текст, ":");
	
	Если НЕ КлючЗначение.Найден Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеПоляВвода(Родитель);
	НовыйЭлемент.Заголовок = СокрЛП(КлючЗначение.Ключ.Значение);
	НовыйЭлемент.Значение = СокрЛП(КлючЗначение.Значение.Значение);
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти   

#Область ПарсингНадписи

&НаКлиенте
Функция ПолучитьОписаниеНадписи(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Надпись");
	Результат.Вставить("Заголовок", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Процедура ПарсингНадписи(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если ПустаяСтрока(Текст.Значение) Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеНадписи(Родитель);
	НовыйЭлемент.Заголовок = СокрЛП(Текст.Значение);
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти   

#КонецОбласти   
ПараметрыВыполнения