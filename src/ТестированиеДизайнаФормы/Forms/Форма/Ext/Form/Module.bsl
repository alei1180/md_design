#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ПостроитьФорму(Команда)
	МассивСтрок = СтрРазделить(Редактор, Символы.ПС);
	
	ДанныеГрупп = ПарсингГрупп(МассивСтрок);
	
	ФормаГруппы = ПолучитьОписаниеВертикальнойГруппы();
	
	Для Каждого ГоризонтальнаяГруппа Из ДанныеГрупп Цикл
		ПарсингГоризонтальнойГруппы(ГоризонтальнаяГруппа, ФормаГруппы);
	КонецЦикла;
	
	ВывестиПредставлениеДереваНаСервере(ФормаГруппы);

	НачатьПостроениеНаСервере(ФормаГруппы);
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура ВывестиПредставлениеДереваНаСервере(Данные)
	Библиотека = Обработки.ктв_ПреобразованиеДанных.Создать();
	ПредставлениеJSON = Библиотека.ЗаписатьОписаниеОбъектаВJSON(Данные);
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеПарсинга(Строка, Столбец, Сообщение, Отказ)
	Отказ = Истина;
	ТекстСообщения = СтрШаблон("%1 [%2, %3]", Сообщение, Строка, Столбец);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();  
	
	Элементы.Редактор.УстановитьГраницыВыделения(Строка, Столбец, Строка, Столбец + 1);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции


//	
//	< Меню | "Отмена">
//< ..Подменю |    >
//< .. |           >
//< fff + ffff |   >

// Структура строки

// -> <Кнопка 1 {Свойство=Значение}| Кнопка 2 | Кнопка 3 > <-
// -> [] Флажок {Свойство=Значение} <-
// -> Флажок [] {Свойство=Значение} <-
// -> Поле ввода: __Значение__.1VX^ {Свойство=Значение} <-
// ____
// -> Надпись {Свойство=Значение} <-
// -> (Опция 1 | Опция 2 | Опция 3) Заголовок {Свойство=Значение} <-
// Колонка 1 | Колонка 2

// /Заголовок группы {Свойство=Значение} +

// {Свойство=Значение}
// /Страница {Свойство=Значение}
// /Страница
// ---  окончание групы

// Группа - Новая группа - Страница
// Группа - Страница  

// 1. Выделяем группы, новые группы
// 2. Выделяем свойства страниц (начинается с {)
// 3. Выделяем страницы (начинается с /)
// 4. Выделяем кнопки (начинается с <)
// 5. Выделяем флажки (начинается на [)
// 6. Выделяем опции  (начинается на ()
// 7. Выделяем поля ввода (содержит :)
// 8. Выделяем таблицы (содержит |)
// 9. Выделяем надписи

#Область РаботаСТекстом

&НаКлиенте
Функция НовыйТекст(Значение, Верх, Лево)
	Результат = Новый Структура("Значение,Координаты", Значение, Новый массив);
	Результат.Координаты.Добавить(НовыеКоординаты(Верх, Лево));
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция НовыеКоординаты(Верх, Лево)
	Возврат Новый Структура("Верх,Лево", Верх, Лево);
КонецФункции

&НаКлиенте
Функция ТекстЛев(Текст, ЧислоСимволов)
	Возврат НовыйТекст(Лев(Текст.Значение, ЧислоСимволов), Текст.Координаты[0].Верх, Текст.Координаты[0].Лево);
КонецФункции

&НаКлиенте
Функция ТекстНачинаетсяС(Текст, СтрокаПоиска)
	Возврат СтрНачинаетсяС(СокрЛ(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстЗаканчиваетсяНа(Текст, СтрокаПоиска)
	Возврат СтрЗаканчиваетсяНа(СокрП(Текст.Значение), СтрокаПоиска);
КонецФункции

&НаКлиенте
Функция ТекстСред(Текст, НачальныйНомер, ЧислоСимволов = Неопределено)  
	Если ЧислоСимволов = Неопределено Тогда
		Строка = Сред(Текст.Значение, НачальныйНомер);
	Иначе
		Строка = Сред(Текст.Значение, НачальныйНомер, ЧислоСимволов);
	КонецЕсли;
	Возврат НовыйТекст(Строка, Текст.Координаты[0].Верх, Текст.Координаты[0].Лево + НачальныйНомер - 1);
КонецФункции  

&НаКлиенте
Функция ТекстДлина(Текст)
	Возврат СтрДлина(Текст.Значение);
КонецФункции

&НаКлиенте
Процедура ТекстДобавить(Текст, ДобавляемыйТекст)
	Текст.Значение = Текст.Значение + Символы.ПС + ДобавляемыйТекст.Значение;
	
	Для Каждого Координата Из ДобавляемыйТекст.Координаты Цикл
		Текст.Координаты.Добавить(Координата);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ТекстРазделить(Текст)
	Результат = Новый Массив;
	Значения = СтрРазделить(Текст.Значение, Символы.ПС);
	
	Для Сч = 0 По Значения.ВГраница() Цикл
		Значение = Значения[Сч];
		Координата = Текст.Координаты[Сч];  
		НовыйТекст = НовыйТекст(Значение, Координата.Верх, Координата.Лево);
		Результат.Добавить(НовыйТекст);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СтрНайтиСЭкранированием(Строка, ПодстрокаПоиска, Направление = "СНачала")
	НомерВхождения = 1;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, ПодстрокаПоиска, НаправлениеПоиска[Направление], , НомерВхождения);	
		НомерВхождения = НомерВхождения + 1;
		
		Если Направление = "СНачала" Тогда
			Подстрока = Лев(Строка, Позиция);
		Иначе
			Подстрока = Сред(Строка, Позиция);
		КонецЕсли;

		Если Позиция = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, """") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(Подстрока, "'") % 2 <> 0 Тогда
			Продолжить;
		КонецЕсли;   
		
		Возврат Позиция;
	КонецЦикла;
КонецФункции

&НаКлиенте
Функция ПолучитьКлючЗначениеТекста(Знач Текст, Разделитель, Направление = "СНачала")
	Результат = Новый Структура("Значение,Ключ,Найден", Текст, "", Ложь);
	
	Позиция = СтрНайтиСЭкранированием(Текст.Значение, Разделитель, Направление);
	
	Если Позиция = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Ключ =  ТекстЛев(Текст, Позиция - 1);
	Результат.Значение = ТекстСред(Текст, Позиция + СтрДлина(Разделитель));
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьПодгруппыСтроки(Знач Строка, Разделитель)
	Результат = Новый Массив;
	
	Пока Истина Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Строка, Разделитель);
		Если НЕ СтрКлючЗначение.Найден Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(СтрКлючЗначение.Ключ);
		
		Строка = СтрКлючЗначение.Значение;
	КонецЦикла;

	Результат.Добавить(Строка);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Функция ВыделитьНачальныйКонечныйСимволы(Текст, НачальныеСимволы = Неопределено, КонечныеСимволы = Неопределено)
	Результат = Новый Структура("Текст,ЕстьНачальный,ЕстьКонечный", Текст, Ложь, Ложь);
	
	ТекТекст = Текст;
	
	Если НачальныеСимволы <> Неопределено И ТекстНачинаетсяС(ТекТекст, НачальныеСимволы) Тогда  
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, Неопределено, НачальныеСимволы, "СНачала");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьНачальный = Истина;
			ТекТекст = ГруппаСтроки.Текст;
		КонецЕсли;
	КонецЕсли;   
	
	Если КонечныеСимволы <> Неопределено И ТекстЗаканчиваетсяНа(ТекТекст, КонечныеСимволы) Тогда   
		ГруппаСтроки = ПолучитьГруппуСтроки(ТекТекст, КонечныеСимволы, Неопределено, "СКонца");
		
		Если ГруппаСтроки.Найден Тогда
			Результат.ЕстьКонечный = Истина;
			ТекТекст = ГруппаСтроки.Текст;			
		КонецЕсли;
	КонецЕсли;

	Результат.Текст = ТекТекст;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьГруппуСтроки(Текст, Открывающая, Закрывающая, Направление = "СНачала")
	Строка = СокрЛП(Строка);
	
	Результат = Новый Структура("Текст,Группа,Найден", Текст, "", Ложь);

	Если Открывающая <> Неопределено И Направление = "СНачала" И НЕ ТекстНачинаетсяС(Текст, Открывающая) Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Если Закрывающая <> Неопределено И Направление = "СКонца" И НЕ ТекстЗаканчиваетсяНа(Текст, Закрывающая) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Если Направление = "СНачала" Тогда    
		Если Открывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Открывающая, Направление);
			Результат.Текст = КЗСтроки.Значение;
		КонецЕсли;
		
		Разделитель = Закрывающая;

		ПолеГруппа = "Ключ";
		ПолеСтрока = "Значение";
	Иначе
		Если Закрывающая <> Неопределено Тогда
			КЗСтроки = ПолучитьКлючЗначениеТекста(Результат.Текст, Закрывающая, Направление);
			Результат.Текст = КЗСтроки.Ключ;
		КонецЕсли;
		
		Разделитель = Открывающая;
		
		ПолеГруппа = "Значение";
		ПолеСтрока = "Ключ";
	КонецЕсли;
	
	СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Результат.Текст, Разделитель, Направление);
	Если НЕ СтрКлючЗначение.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Найден = Истина;
	Результат.Текст = СтрКлючЗначение[ПолеСтрока];
	Результат.Группа = СтрКлючЗначение[ПолеГруппа];
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти   

#Область Парсинг

#Область ПарсингГрупп

&НаКлиенте
Функция ПолучитьОписаниеВертикальнойГруппы(ГоризонтальнаяГруппа = Неопределено)
	Результат = ПолучитьОписаниеЭлемента("ВертикальнаяГруппа");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("ОтображатьЗаголовок", Ложь);
	Результат.Вставить("Элементы", Новый Массив);
	
	Если ГоризонтальнаяГруппа <> Неопределено Тогда
		ГоризонтальнаяГруппа.Элементы.Добавить(Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеГоризонтальнойГруппы(ВертикальнаяГруппа = Неопределено)
	Результат = ПолучитьОписаниеЭлемента("ГоризонтальнаяГруппа");
	Результат.Вставить("Элементы", Новый Массив);
	
	ВертикальнаяГруппа.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПарсингГрупп(МассивСтрок)
	ПараметрыВыполнения = Новый Структура("Группы,Форма", Новый Массив, Новый Массив);
	ПараметрыВыполнения.Группы.Добавить(ПараметрыВыполнения.Форма);
	
	НомерСтроки = 1;
	Для Каждого Строка Из МассивСтрок Цикл
		Текст = НовыйТекст(Строка, НомерСтроки, 1);
		ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст);

		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ПараметрыВыполнения.Форма;
КонецФункции

&НаКлиенте
Процедура ПарсингГруппПоСтроке(ПараметрыВыполнения, Текст)
	ТекущиеГруппы = Новый Массив;
	
	Если ПустаяСтрока(Текст.Значение) Тогда
		ПараметрыВыполнения.Группы.Очистить();
		ПараметрыВыполнения.Группы.Добавить(ПараметрыВыполнения.Форма);
		Возврат;
	КонецЕсли;
	
	Группы = ПолучитьПодгруппыСтроки(Текст, "#");        

	Сч = 0;
	Для Сч = 0 По Группы.ВГраница() Цикл
		Группа = Группы[Сч];
		ПрошлаяГруппа = ПараметрыВыполнения.Группы[Сч];
		ПарсингДобавляемыхГрупп(ТекущиеГруппы, Группа, ПрошлаяГруппа);
	КонецЦикла;
	
	ПараметрыВыполнения.Группы = ТекущиеГруппы;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингДобавляемыхГрупп(ТекущиеГруппы, Группа, ПрошлаяГруппа)
	ДобавляемыеГруппы = ПолучитьПодгруппыСтроки(Группа, "+");

	Если ДобавляемыеГруппы.Количество() <= 1 Тогда
		Если ПрошлаяГруппа.Количество() > 0 Тогда
			ТекТекст = ПрошлаяГруппа[ПрошлаяГруппа.ВГраница()];
			ТекстДобавить(ТекТекст, Группа);
		Иначе
			ПрошлаяГруппа.Добавить(Группа);
		КонецЕсли;
		
		ТекущиеГруппы.Добавить(ПрошлаяГруппа);
		Возврат;
	КонецЕсли;
	
	МассивДобавляемыеГруппы = Новый Массив;
	ПрошлаяГруппа.Добавить(МассивДобавляемыеГруппы);
	
	Для Каждого ДобавляемаяГруппа Из ДобавляемыеГруппы Цикл
		МассивДобавляемаяГруппа = ЗначениеВМассиве(ДобавляемаяГруппа);
		
		ТекущиеГруппы.Добавить(МассивДобавляемаяГруппа);
		МассивДобавляемыеГруппы.Добавить(МассивДобавляемаяГруппа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарсингВертикальнойГруппы(ВертикальнаяГруппа, Родитель)         
	Группа = ПолучитьОписаниеВертикальнойГруппы(Родитель);
	
	Для Каждого ГоризонтальнаяГруппа Из ВертикальнаяГруппа Цикл
		ПарсингГоризонтальнойГруппы(ГоризонтальнаяГруппа, Группа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПарсингГоризонтальнойГруппы(ГоризонтальнаяГруппа, Родитель)         
	Если ТипЗнч(ГоризонтальнаяГруппа) <> Тип("Массив") Тогда
		ПарсингСтрочныхЭлементов(Родитель, ГоризонтальнаяГруппа);
		Возврат;
	КонецЕсли;

	Группа = ПолучитьОписаниеГоризонтальнойГруппы(Родитель);
	
	Для Каждого ВертикальнаяГруппа Из ГоризонтальнаяГруппа Цикл
		ПарсингВертикальнойГруппы(ВертикальнаяГруппа, Группа);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПарсингСтрочныхЭлементов

&НаКлиенте
Функция ПарсингСвойств(ПараметрыВыполнения, Свойства, Текст) 
    Результат = Текст;
	
	СтрСвойства = ПолучитьГруппуСтроки(Текст, "{", "}", "СКонца");
	
	Если НЕ СтрСвойства.Найден Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СтрСвойства.Текст;
	
	МассивСвойства = ПолучитьПодгруппыСтроки(СтрСвойства.Группа, ";");        

	Для Каждого Свойство Из МассивСвойства Цикл
		СтрКлючЗначение = ПолучитьКлючЗначениеТекста(Свойство, "=");
		ИмяСвойства = СтрКлючЗначение.Ключ.Значение;
		ЗначениеСвойства = СтрКлючЗначение.Значение.Значение;
		Свойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;  
	
	Возврат Результат;
КонецФункции    

&НаКлиенте
Процедура ЗаполнитьСвойства(ПараметрыВыполнения, Элемент)
	Для Каждого КлючЗначение Из ПараметрыВыполнения.Свойства Цикл
		Элемент.Свойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;	
	
	ПараметрыВыполнения.Свойства = Новый Структура;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеЭлемента(Тип)  
	Результат = Новый Структура;
	Результат.Вставить("Тип", Тип);
	Результат.Вставить("Свойства", Новый Структура);
	Результат.Вставить("Координаты", Новый Массив);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьТекстСКартинкой(Строка)
	Результат = Новый Структура("Текст,Картинка,ПоложениеКартинки", Строка, Неопределено, "Лево");
	
	МассивПодстрок = СтрРазделить(Строка, " ");
	Если МассивПодстрок.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;

	Если СтрНачинаетсяС(МассивПодстрок[0],"@") Тогда
		Результат.Картинка = Сред(МассивПодстрок[0], 2);
		МассивПодстрок.Удалить(0);

		Результат.Текст = СтрСоединить(МассивПодстрок, " ");
	ИначеЕсли СтрНачинаетсяС(МассивПодстрок[МассивПодстрок.ВГраница()],"@") Тогда
		Результат.Картинка = Сред(МассивПодстрок[МассивПодстрок.ВГраница()], 2);
		МассивПодстрок.Удалить(МассивПодстрок.ВГраница());

		Результат.Текст = СтрСоединить(МассивПодстрок, " ");
		Результат.ПоложениеКартинки = "Право";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЭтоКонечныйЭлемент(Знач Значение)
	Значение = СокрЛП(Значение);
	Возврат Значение <> "" И СтрЗаменить(Значение, "-","") = "";
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыВыполненияСтрочныхЭлементов()
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Свойства", Новый Структура);
	ПараметрыВыполнения.Вставить("КоманднаяПанель", Неопределено);

	ПараметрыВыполнения.Вставить("Таблица", Неопределено);
	ПараметрыВыполнения.Вставить("ТаблицаЗаголовокЗаполнен", Ложь);
	ПараметрыВыполнения.Вставить("ТаблицаИерархия", Новый Массив);
	Возврат ПараметрыВыполнения;
КонецФункции

&НаКлиенте
Процедура ПарсингСтрочныхЭлементов(Родитель, Знач Текст)   
	ПараметрыВыполнения = ПолучитьПараметрыВыполненияСтрочныхЭлементов();       
	
	МассивТекст = ТекстРазделить(Текст);
	
	Для Каждого СтрокаТекст Из МассивТекст Цикл
		ПарсингСтрочногоЭлемента(ПараметрыВыполнения, Родитель, СтрокаТекст);
		ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингСтрочногоЭлемента(ПараметрыВыполнения, Родитель, Знач Текст)   
// 4. Выделяем кнопки (начинается с <)
// 6. Выделяем опции  (начинается на ()
// 7. Выделяем поля ввода (содержит :)
// 8. Выделяем таблицы (содержит |)
// 5. Выделяем флажки (начинается на [)
// 9. Выделяем надписи         

	Выполнена = Ложь;
	
	СтрРасположение = ВыделитьНачальныйКонечныйСимволы(Текст, "->", "<-");
	Текст = СтрРасположение.Текст;
	Если СтрРасположение.ЕстьНачальный И СтрРасположение.ЕстьКонечный Тогда
		 ПараметрыВыполнения.Свойства.Вставить("ГоризонтальноеПоложение", "Центр");
	ИначеЕсли СтрРасположение.ЕстьНачальный Тогда
		ПараметрыВыполнения.Свойства.Вставить("ГоризонтальноеПоложение", "Право");
	КонецЕсли;
	
	ТекстБезСвойств = ПарсингСвойств(ПараметрыВыполнения, ПараметрыВыполнения.Свойства, Текст);
	
	ПарсингКоманднойПанели(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингТаблицы(ПараметрыВыполнения, Родитель, Текст, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингПоляВвода(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПарсингФлажкаЛевый(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;
	
	ПарсингФлажкаПравый(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

	ПарсингНадписи(ПараметрыВыполнения, Родитель, ТекстБезСвойств, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеКнопки(КоманднаяПанель)  
	Результат = ПолучитьОписаниеЭлемента("Кнопка");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("Картинка", Неопределено);
	Результат.Свойства.Вставить("ПоложениеКартинки", "Лево");
	КоманднаяПанель.Элементы.Добавить(Результат);

	Возврат Результат;
КонецФункции

#Область ПарсингКоманднойПанели

&НаКлиенте
Функция ПолучитьОписаниеКоманднойПанели()  
	Результат = ПолучитьОписаниеЭлемента("КоманднаяПанель"); 
	Результат.Свойства.Вставить("ГоризонтальноеПоложение", "Лево");
	Результат.Вставить("Элементы", Новый Массив);

	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингКоманднойПанели(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстНачинаетсяС(Текст, "<") Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);

	Если НЕ ТекстЗаканчиваетсяНа(Текст, ">") Тогда
		 // Ошибка
	КонецЕсли;
	
	Содержимое = ВыделитьНачальныйКонечныйСимволы(Текст, "<", ">");
	Текст = Содержимое.Текст;
	
	Кнопки = ПолучитьПодгруппыСтроки(Текст, "|");
	
	НоваяКоманднаяПанель = ПолучитьОписаниеКоманднойПанели();
	ПараметрыВыполнения.КоманднаяПанель = НоваяКоманднаяПанель;     
	
	ЗаполнитьСвойства(ПараметрыВыполнения, НоваяКоманднаяПанель);

	Для Каждого ОписаниеКнопки Из Кнопки Цикл   
		ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, НоваяКоманднаяПанель, ОписаниеКнопки);
	КонецЦикла;

	Выполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингКнопкиКоманднойПанели(ПараметрыВыполнения, Родитель, Знач Текст) 
	НоваяКнопка = ПолучитьОписаниеКнопки(Родитель); 

    Текст = ПарсингСвойств(ПараметрыВыполнения, НоваяКнопка.Свойства, Текст);
	НоваяКнопка.Свойства.Заголовок = СокрЛП(Текст.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель)
	Если ПараметрыВыполнения.КоманднаяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Родитель.Элементы.Добавить(ПараметрыВыполнения.КоманднаяПанель);
	ПараметрыВыполнения.КоманднаяПанель = Неопределено; 
КонецПроцедуры

#КонецОбласти 

#Область ПарсингФлажка

&НаКлиенте
Функция ПолучитьОписаниеФлажка(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Флажок");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("ПоложениеЗаголовка", "Право");
	Результат.Вставить("Значение", Ложь);
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
	
КонецФункции 
 
&НаКлиенте
Процедура ПарсингФлажкаЛевый(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстНачинаетсяС(Текст, "[") Тогда
		 Возврат;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СНачала");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Право");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
КонецПроцедуры

&НаКлиенте
Процедура ПарсингФлажкаПравый(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если НЕ ТекстЗаканчиваетсяНа(Текст, "]") Тогда
		 Возврат;
	КонецЕсли;

	РезультатПарсинга = ПолучитьГруппуСтроки(Текст, "[", "]", "СКонца");
	ПараметрыПарсинга = ПараметрыПарсингаФлажка(РезультатПарсинга, "Лево");
	
	ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПарсингаФлажка(РезультатПарсинга, ПоложениеЗаголовка) 
	Результат = Новый Структура("ПоложениеЗаголовка,Заголовок,Значение");
	Результат.ПоложениеЗаголовка = ПоложениеЗаголовка;
	Результат.Заголовок = РезультатПарсинга.Текст;
	Результат.Значение = НЕ ПустаяСтрока(РезультатПарсинга.Группа.Значение);
	
	Возврат Результат;
КонецФункции 

&НаКлиенте
Процедура ПарсингФлажкаОбщий(ПараметрыВыполнения, Родитель, ПараметрыПарсинга, Выполнена) 
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеФлажка(Родитель);
	НовыйЭлемент.Свойства.ПоложениеЗаголовка = ПараметрыПарсинга.ПоложениеЗаголовка;
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(ПараметрыПарсинга.Заголовок.Значение);
	НовыйЭлемент.Значение = ПараметрыПарсинга.Значение;
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти

 #Область ПарсингТаблицы
 
&НаКлиенте
Функция ПолучитьОписаниеТаблицы(Родитель)  
	Результат = ПолучитьОписаниеЭлемента("Таблица"); 
	Результат.Вставить("Колонки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	
	Родитель.Элементы.Добавить(Результат);

	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеКолонкиТаблицы(Родитель)   
	Результат = ПолучитьОписаниеЭлемента("КолонкаТаблицы"); 
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Свойства.Вставить("ГоризонтальноеПоложение", "Лево");
	
	Родитель.Колонки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеСтрокиТаблицы(Родитель)
	Результат = ПолучитьОписаниеЭлемента("СтрокаТаблицы"); 
	Результат.Вставить("Ячейки", Новый Массив);
	Результат.Вставить("Строки", Новый Массив);
	Родитель.Строки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы)
	Результат = ПолучитьОписаниеЭлемента("ЯчейкаТаблицы"); 
	Результат.Вставить("Значение", "");
	
	СтрокаТаблицы.Ячейки.Добавить(Результат);
	
	Возврат Результат;
КонецФункции

 &НаКлиенте
Процедура ПарсингТаблицы(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Колонки = ПолучитьПодгруппыСтроки(Текст, "|");
	
	Если Колонки.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;       
	
	Таблица = ПараметрыВыполнения.Таблица;
	Если Таблица = Неопределено Тогда
		Таблица = ПолучитьОписаниеТаблицы(Родитель);
		ПараметрыВыполнения.Таблица = Таблица;
	КонецЕсли;
	
	ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;    
	
	ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);	
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;          
	
	ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена);
	Если Выполнена Тогда
		Возврат;
	КонецЕсли;  	
 
	Выполнена = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарсингЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементКолонка Из Колонки Цикл
		НовыйЭлемент = ПолучитьОписаниеКолонкиТаблицы(Таблица);
		
    	Текст = ПарсингСвойств(ПараметрыВыполнения, НовыйЭлемент.Свойства, ЭлементКолонка);
		НовыйЭлемент.Свойства.Заголовок = СокрЛП(Текст.Значение);  
	КонецЦикла;
	Выполнена = Истина;
КонецПроцедуры   

&НаКлиенте
Функция ЭтоКонечныйЭлементТаблицы(Знач Значение)
	Значение = СокрЛП(Значение);
	
	Если СтрНачинаетсяС(Значение, ":") Тогда
		Значение = Сред(Значение, 2);
	КонецЕсли;

	Если СтрЗаканчиваетсяНа(Значение, ":") Тогда
		Значение = Сред(Значение, 1, СтрДлина(Значение) - 1);
	КонецЕсли;
	
	Возврат ЭтоКонечныйЭлемент(Значение);
КонецФункции

&НаКлиенте
Процедура ПарсингРазделителяЗаголовкаТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	Если ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;      
	МассивГоризонтальноеПоложение = Новый Массив;
	Для Каждого ЭлементКолонка Из Колонки Цикл
		Содержимое = ВыделитьНачальныйКонечныйСимволы(ЭлементКолонка, ":", ":");
		Текст = Содержимое.Текст;
		
		Если НЕ ЭтоКонечныйЭлемент(Текст.Значение) Тогда
			Возврат;
		КонецЕсли;                               
		
		Если Содержимое.ЕстьНачальный И Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Центр")
		ИначеЕсли Содержимое.ЕстьКонечный Тогда
			МассивГоризонтальноеПоложение.Добавить("Право")
		Иначе
			МассивГоризонтальноеПоложение.Добавить("Лево")
		КонецЕсли;
	КонецЦикла;

	Сч = 0;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Если Сч > МассивГоризонтальноеПоложение.ВГраница()  Тогда
			Прервать;
		КонецЕсли;
		Колонка.Свойства.Вставить("ГоризонтальноеПоложение", МассивГоризонтальноеПоложение[Сч]);
		Сч = Сч + 1;
	КонецЦикла;   
	
	ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен = Истина;
	
	Выполнена = Истина;
КонецПроцедуры
 
&НаКлиенте
Функция ВыделитьУровеньИзЯчейкиТаблицы(Знач Текст)
	Результат = Новый Структура("Текст,Уровень", Текст, 0);
	
	Пока Истина Цикл
		СтрУровень = ВыделитьНачальныйКонечныйСимволы(Результат.Текст, ".", Неопределено);
		Если НЕ СтрУровень.ЕстьНачальный Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Уровень = Результат.Уровень + 1;
		Результат.Текст = СтрУровень.Текст;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Знач Текст) 
	Результат = Новый Структура("СтрокаТаблицы,Уровень,Текст");
	
	СтрУровень = ВыделитьУровеньИзЯчейкиТаблицы(Текст);  
	
	Результат.Текст = СтрУровень.Текст;
	Результат.Уровень = СтрУровень.Уровень;
	
	Таблица = ПараметрыВыполнения.Таблица;

	Если СтрУровень.Уровень = 0 Тогда
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(Таблица);
	Иначе
		ТекРодитель = ПараметрыВыполнения.ТаблицаИерархия[СтрУровень.Уровень - 1];
		Результат.СтрокаТаблицы = ПолучитьОписаниеСтрокиТаблицы(ТекРодитель);
	КонецЕсли;             
	
	Иерархия = Новый Массив;
	
	Для СчРодители = 0 По СтрУровень.Уровень - 1 Цикл
		Иерархия.Добавить(ПараметрыВыполнения.ТаблицаИерархия[СчРодители]);
	КонецЦикла;
	Иерархия.Добавить(Результат.СтрокаТаблицы);
	ПараметрыВыполнения.ТаблицаИерархия = Иерархия;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПарсингЯчейкиТаблицы(ПараметрыВыполнения, СтрокаТаблицы, Текст)
	
	НоваяЯчейка = ПолучитьОписаниеЯчейкиТаблицы(СтрокаТаблицы);
	
	Текст = ПарсингСвойств(ПараметрыВыполнения, НоваяЯчейка.Свойства, Текст);
	НоваяЯчейка.Значение = СокрЛП(Текст.Значение);  	
КонецПроцедуры

&НаКлиенте
Процедура ПарсингСтрокиТаблицы(ПараметрыВыполнения, Таблица, Колонки, Выполнена) 
	Если НЕ ПараметрыВыполнения.ТаблицаЗаголовокЗаполнен Тогда
		Возврат;
	КонецЕсли;   

	СтрокаТаблицы = Неопределено;
	
	ПерваяКолонка = Истина;
	Для Каждого ЭлементКолонка Из Колонки Цикл
		Текст = ЭлементКолонка;
		Если ПерваяКолонка Тогда
			ДанныеСтрокаТаблицы = ПолучитьСтрокуТаблицы(ПараметрыВыполнения, Текст);
			СтрокаТаблицы = ДанныеСтрокаТаблицы.СтрокаТаблицы;
			
			Если ДанныеСтрокаТаблицы.Уровень > 0 Тогда
				Таблица.Тип = "Дерево";
			КонецЕсли;
			
			Текст = ДанныеСтрокаТаблицы.Текст;
			
			ПерваяКолонка = Ложь;
		КонецЕсли;
		
		ПарсингЯчейкиТаблицы(ПараметрыВыполнения, СтрокаТаблицы, Текст);
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

 #КонецОбласти

#Область ПарсингПоляВвода

&НаКлиенте
Функция ПолучитьОписаниеПоляВвода(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("ПолеВвода");
	Результат.Свойства.Вставить("Заголовок", "");
	Результат.Вставить("Значение", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Процедура ПарсингПоляВвода(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	КлючЗначение = ПолучитьКлючЗначениеТекста(Текст, ":");
	
	Если НЕ КлючЗначение.Найден Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеПоляВвода(Родитель);
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(КлючЗначение.Ключ.Значение);
	НовыйЭлемент.Значение = СокрЛП(КлючЗначение.Значение.Значение);
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти   

#Область ПарсингНадписи

&НаКлиенте
Функция ПолучитьОписаниеНадписи(Родитель) 
	Результат = ПолучитьОписаниеЭлемента("Надпись");
	Результат.Свойства.Вставить("Заголовок", "");
	
	Родитель.Элементы.Добавить(Результат);
	
	Возврат Результат;
КонецФункции 
 
&НаКлиенте
Процедура ПарсингНадписи(ПараметрыВыполнения, Родитель, Знач Текст, Выполнена) 
	Если ПустаяСтрока(Текст.Значение) Тогда
		 Возврат;
	КонецЕсли;
	
	ДобавитьКоманднуюПанельПриНеобходимости(ПараметрыВыполнения, Родитель);
	
	НовыйЭлемент = ПолучитьОписаниеНадписи(Родитель);
	НовыйЭлемент.Свойства.Заголовок = СокрЛП(Текст.Значение);
	ЗаполнитьСвойства(ПараметрыВыполнения, НовыйЭлемент);
	
	Выполнена = Истина;
КонецПроцедуры

#КонецОбласти   

#КонецОбласти   

#КонецОбласти 

#Область Построение

&НаСервере
Процедура НачатьПостроениеНаСервере(ФормаГруппы)    
	ГруппаКонтейнер = Элементы.Найти("ГруппаКонтейнер");
	Если ГруппаКонтейнер <> Неопределено Тогда
		Элементы.Удалить(ГруппаКонтейнер);
	КонецЕсли;

	ГруппаКонтейнер = Элементы.Добавить("ГруппаКонтейнер", Тип("ГруппаФормы"), Элементы.ГруппаПросмотр);
	ГруппаКонтейнер.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКонтейнер.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаКонтейнер.ОтображатьЗаголовок = Ложь; 
	ГруппаКонтейнер.РастягиватьПоГоризонтали = Истина;
	ГруппаКонтейнер.РастягиватьПоВертикали = Истина;
	ГруппаКонтейнер.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	ПараметрыВыполнения = Новый Структура("СвободныеНомераРеквизитов", Новый Структура);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Булево", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Строка", 1);
	ПараметрыВыполнения.СвободныеНомераРеквизитов.Вставить("Число", 1);
	
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ФормаГруппы, ГруппаКонтейнер);
КонецПроцедуры

&НаСервере
Процедура ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Данные, Группа)      
	
	Подчиненные = Данные.Элементы;
	
	Для Каждого ЭлементДанных Из Подчиненные Цикл
		Выполнена = Ложь;
		
		ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьТаблицу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена);
		Если Выполнена Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьГоризонтальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ГоризонтальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь; 
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВертикальнуюГруппу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "ВертикальнаяГруппа" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	НоваяГруппа = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	НоваяГруппа.ОтображатьЗаголовок = ЭлементДанных.Свойства.ОтображатьЗаголовок; 
	НоваяГруппа.Заголовок = ЭлементДанных.Свойства.Заголовок;
	
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	НоваяГруппа.РастягиватьПоГоризонтали = Истина;
	НоваяГруппа.РастягиватьПоВертикали = Ложь;
	ПостроитьЭлементыНаСервере(ПараметрыВыполнения, ЭлементДанных, НоваяГруппа);   
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементНадпись(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Надпись" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Группа);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	//НовыйЭлемент.Заголовок = ЭлементДанных.Свойства.Заголовок;
	
	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);
	
	//НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];
	//НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементПолеВвода(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)     
	Если ЭлементДанных.Тип <> "ПолеВвода" Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита =  ПолучитьИмяРеквизита(ПараметрыВыполнения, "Строка");
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;       
	
	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);

	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Значение;    
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементФлажок(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Флажок" Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита =  ПолучитьИмяРеквизита(ПараметрыВыполнения, "Булево");
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), Группа);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = ИмяРеквизита;

	УстановитьСвойствоЭлементаНаСервере(НовыйЭлемент, ЭлементДанных);
	
	ЭтотОбъект[ИмяРеквизита] = ЭлементДанных.Значение;  

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицу(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Таблица" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяТаблица = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ТаблицаФормы"), Группа);
	НоваяТаблица.ПутьКДанным = "ТабличныйРеквизит1";
	
	Колонки = ЭлементДанных.Колонки;
	Строки = ЭлементДанных.Строки;
	
	Сч = 1;
	Для Каждого Колонка Из Колонки Цикл
		УИДЭлемента = Новый УникальныйИдентификатор;
		ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
		
		НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НоваяТаблица);
		НовыйКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НовыйКолонка.ПутьКДанным = "ТабличныйРеквизит1.СтроковаяКолонка" + Сч;
		НовыйКолонка.Заголовок = Колонка.Свойства.Заголовок;
		НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.Свойства.ГоризонтальноеПоложение];
		
		Сч = Сч  + 1;
	КонецЦикла;   
	
	Таблица = ТабличныйРеквизит1;
	Таблица.Очистить();
	Для Каждого Строка Из Строки Цикл 
		СтрокаТаблицы = Таблица.Добавить();
		Сч = 0;       
		
		Ячейки = Строка.Ячейки;
		Для Каждого Ячейка Из Ячейки Цикл
			СтрокаТаблицы["СтроковаяКолонка" + (Сч +1)] = Ячейка.Значение;
			Сч = Сч + 1;
		КонецЦикла;
	КонецЦикла;

	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДерево(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "Дерево" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяТаблица = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ТаблицаФормы"), Группа);
	НоваяТаблица.ПутьКДанным = "ДеревоРеквизит1";
	
	Колонки = ЭлементДанных.Колонки;
	Строки = ЭлементДанных.Строки;
	
	Сч = 1;
	Для Каждого Колонка Из Колонки Цикл
		УИДЭлемента = Новый УникальныйИдентификатор;
		ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
		
		НовыйКолонка = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), НоваяТаблица);
		НовыйКолонка.Вид = ВидПоляФормы.ПолеВвода;
		НовыйКолонка.ПутьКДанным = "ДеревоРеквизит1.СтроковаяКолонка" + Сч;
		НовыйКолонка.Заголовок = Колонка.Свойства.Заголовок;
		НовыйКолонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Колонка.Свойства.ГоризонтальноеПоложение];
		
		Сч = Сч  + 1;
	КонецЦикла;          
	
	ДеревоРеквизит1.ПолучитьЭлементы().Очистить(); 
	
	ДобавитьДеревоСтроки(Строки, ДеревоРеквизит1);
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьДеревоСтроки(Строки, ЭлементДерева)
	ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл 
		СтрокаТаблицы = ЭлементыДерева.Добавить();
		
		Сч = 0;       
		Для Каждого Ячейка Из Строка.Ячейки Цикл
			СтрокаТаблицы["СтроковаяКолонка" + (Сч +1)] = Ячейка.Значение;
			Сч = Сч + 1;
		КонецЦикла;
		
		ДобавитьДеревоСтроки(Строка.Строки, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницы(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  	
	Если ЭлементДанных.Тип <> "Страницы" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлемента = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	
	ЭлементСтраницы = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), Группа);
	ЭлементСтраницы.Вид = ВидГруппыФормы.Страницы;
	ЭлементСтраницы.РастягиватьПоГоризонтали = Истина;
	ЭлементСтраницы.РастягиватьПоВертикали = Ложь;
	
	Страницы = ЭлементДанных.ПолучитьЭлементы();
	
	Для Каждого Страница Из Страницы Цикл
		УИДЭлементаСтраница = Новый УникальныйИдентификатор;
		ИмяЭлементаСтраница = "Элемент_" + СтрЗаменить(УИДЭлементаСтраница,"-","");
		
		ЭлементСтраница = Элементы.Добавить(ИмяЭлементаСтраница, Тип("ГруппаФормы"), ЭлементСтраницы);
		ЭлементСтраница.Вид = ВидГруппыФормы.Страница;
		ЭлементСтраница.Заголовок = Страница.Свойства.Заголовок;
		
		ПостроитьЭлементыНаСервере(ПараметрыВыполнения, Страница, ЭлементСтраница);
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьКоманднуюПанель(ПараметрыВыполнения, ЭлементДанных, Группа, Выполнена)  
	Если ЭлементДанных.Тип <> "КоманднаяПанель" Тогда 
		Возврат;
	КонецЕсли;
	
	УИДЭлемента = Новый УникальныйИдентификатор;
	ИмяЭлементаТаблица = "Элемент_" + СтрЗаменить(УИДЭлемента,"-","");
	НоваяКоманднаяПанель = ЭтаФорма.Элементы.Добавить(ИмяЭлементаТаблица, Тип("ГруппаФормы"), Группа);
	НоваяКоманднаяПанель.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	НоваяКоманднаяПанель.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[ЭлементДанных.Свойства.ГоризонтальноеПоложение];

	Кнопки = ЭлементДанных.ПолучитьЭлементы();
	
	Для Каждого Кнопка Из Кнопки Цикл
		УИДЭлементаСтраница = Новый УникальныйИдентификатор;
		ИмяЭлементаСтраница = "Элемент_" + СтрЗаменить(УИДЭлементаСтраница,"-","");
		
		ЭлементКнопка = Элементы.Добавить(ИмяЭлементаСтраница, Тип("КнопкаФормы"), НоваяКоманднаяПанель);
		ЭлементКнопка.ИмяКоманды = "КомандаЗаглушка";
		ЭлементКнопка.Заголовок = Кнопка.Свойства.Заголовок;         
		
		Если ПустаяСтрока(Кнопка.Свойства.Заголовок) Тогда
			ЭлементКнопка.Отображение = ОтображениеКнопки.Картинка;
		Иначе
			ЭлементКнопка.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;
		
		ЭлементКнопка.ПоложениеКартинки = ПоложениеКартинкиКнопкиФормы[Кнопка.Свойства.ПоложениеКартинки];
		
		Если Кнопка.Свойства.Картинка <> Неопределено Тогда
			ЭлементКнопка.Картинка = БиблиотекаКартинок[Кнопка.Свойства.Картинка];
		КонецЕсли;        

		Если Кнопка.Свойства.Свойство("ЦветФона") Тогда
			ЭлементКнопка.ЦветФона = WebЦвета[Кнопка.Свойства.ЦветФона];
		КонецЕсли;        

		Если Кнопка.Свойства.Свойство("ЦветТекста") Тогда
			ЭлементКнопка.ЦветТекста = WebЦвета[Кнопка.Свойства.ЦветТекста];
		КонецЕсли;        
		
	КонецЦикла;
	
	Выполнена = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяРеквизита(ПараметрыВыполнения, Тип)
	СвободныйНомер = ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип];
	ИмяРеквизита = СтрШаблон("%1Реквизит%2", Тип, СвободныйНомер);
	ПараметрыВыполнения.СвободныеНомераРеквизитов[Тип] = СвободныйНомер + 1;
	Возврат ИмяРеквизита;
КонецФункции 

&НаСервере
Процедура УстановитьСвойствоЭлементаНаСервере(ЭлементФормы, ЭлементДанных)
	Свойства = ЭлементДанных.Свойства;
	Тип = ЭлементДанных.Тип;
	
	Если Свойства.Свойство("Заголовок") Тогда
		ЭлементФормы.Заголовок = Свойства.Заголовок;
	КонецЕсли;

	Если Свойства.Свойство("ГоризонтальноеПоложение") Тогда
		Если Тип = "Надпись" 
			ИЛИ Тип = "Флажок" Тогда
			ЭлементФормы.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента[Свойства.ГоризонтальноеПоложение];
		Иначе
			ЭлементФормы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента[Свойства.ГоризонтальноеПоложение];
		КонецЕсли;
	КонецЕсли;   

	Если Свойства.Свойство("ПоложениеЗаголовка") Тогда
		ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[Свойства.ПоложениеЗаголовка];
	КонецЕсли;        

	Если Свойства.Свойство("ЦветФона") Тогда
		ЭлементФормы.ЦветФона = WebЦвета[Свойства.ЦветФона];
	КонецЕсли;        

	Если Свойства.Свойство("ЦветТекста") Тогда        
		Если Тип = "Флажок" Тогда
			ЭлементФормы.ЦветТекстаЗаголовка = WebЦвета[Свойства.ЦветТекста];
		Иначе
			ЭлементФормы.ЦветТекста = WebЦвета[Свойства.ЦветТекста];
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти