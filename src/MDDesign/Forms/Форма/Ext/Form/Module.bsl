#Область ОписаниеПеременных

// Модуль настрооек синтаксиса
&НаКлиенте
Перем Синтаксис;

// Модуль парсинга текста
&НаКлиенте
Перем Парсер;

// Модуль определителя имен реквизитов и элементов
&НаКлиенте
Перем ОпределительРеквизитов;

// Модуль форматирования текста
&НаКлиенте
Перем Форматтер;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СведенияОВнешнейОбработке = ОбработкаОбъект.СведенияОВнешнейОбработке();	
	
	Версия = СведенияОВнешнейОбработке.Версия;
	
	ЭтаФорма.Заголовок = СтрШаблон("MDDesign. Версия %1", Версия);
	
	ЭтаФорма.__ИдентификаторОбработки = ОбработкаОбъект.Метаданные().ПолноеИмя();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// BSLLS:GetFormMethod-off
	Парсер = ПолучитьФорму(__ИдентификаторОбработки + ".Форма.Парсер", , ЭтаФорма);
	ОпределительРеквизитов = ПолучитьФорму(__ИдентификаторОбработки + ".Форма.ОпределительРеквизитов", , ЭтаФорма);
	Синтаксис = ПолучитьФорму(__ИдентификаторОбработки + ".Форма.Синтаксис", , ЭтаФорма);
	Форматтер = ПолучитьФорму(__ИдентификаторОбработки + ".Форма.Форматтер", , ЭтаФорма);
	// BSLLS:GetFormMethod-on
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура __ПостроитьФорму(Команда)
	ФормаГруппы = Парсер().Разобрать(__Редактор);
	ОписанияРеквизитов = ОпределительРеквизитов().Заполнить(ФормаГруппы); 
	
	Построить(ФормаГруппы, ОписанияРеквизитов);
	
	ЗаголовокФормы = ФормаГруппы.НаборСвойств.Заголовок;
	Если ПустаяСтрока(ЗаголовокФормы) Тогда
		ЗаголовокФормы = "<Без заголовка>";
	КонецЕсли;
	
	ЭтотОбъект.__ЗаголовокФормы = ЗаголовокФормы;
КонецПроцедуры

&НаКлиенте
Процедура __ПостроитьФормуВОтдельномОкне(Команда)    
	ФормаГруппы = Парсер().Разобрать(__Редактор);
	ОписанияРеквизитов = ОпределительРеквизитов().Заполнить(ФормаГруппы); 
	
	ФормаПросмотр = ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаПросмотр", , ЭтаФорма);
	ФормаПросмотр.Построить(ФормаГруппы, ОписанияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура __Форматировать(Команда)
	ФормаГруппы = Парсер().Разобрать(__Редактор);
	ЭтаФорма.__Редактор = Форматтер().Форматировать(ФормаГруппы);
	ЭтотОбъект.ТекущийЭлемент = Элементы.__Редактор;
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьКартинку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКартинкиЗавершение", ЭтотОбъект);
						 
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаВыбораКартинки", , ЭтаФорма, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.__Редактор.ВыделенныйТекст = Лексема("Картинка") + РезультатЗакрытия;
КонецПроцедуры

&НаКлиенте
Процедура __РедакторТаблицы(Команда)                               
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.__Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);   
	
	ПозицияКурсора = ПолучитьБлижайшуюПозициюКурсора(НачалоСтроки, НачалоКолонки);

	ФормаГруппы = Парсер().Разобрать(__Редактор);
	
	ИерархияЭлементов = Новый Массив;
	
	ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ФормаГруппы, ПозицияКурсора.НомерСтроки, ПозицияКурсора.НомерКолонки);
	
	РодительЭлемента = Неопределено;
	Если ИерархияЭлементов.Количество() = 0 Тогда
		ИерархияЭлементов.Добавить(ФормаГруппы);
	КонецЕсли;
	
	ТекущееОписание = ИерархияЭлементов[ИерархияЭлементов.ВГраница()];
	
	ПередЭлементом = Неопределено;
	ВместоЭлемента = Неопределено;
	Если 
		НЕ ПозицияКурсора.Пустая
		И (ТекущееОписание.Тип = "Таблица"
		 ИЛИ ТекущееОписание.Тип = "Дерево") Тогда
		ВместоЭлемента = ТекущееОписание;
	Иначе
		ПередЭлементом = ТекущееОписание;
	КонецЕсли;

	
	Если ИерархияЭлементов.Количество() > 1 Тогда
		РодительЭлемента = ИерархияЭлементов[ИерархияЭлементов.ВГраница() - 1];
	Иначе
		РодительЭлемента = ФормаГруппы;
		ВместоЭлемента = Неопределено;
		ПередЭлементом = Неопределено;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОписаниеТаблицы", ВместоЭлемента);
	
	ДополнительныеПараметры = Новый Структура("РодительЭлемента,ПередЭлементом,ВместоЭлемента,ФормаГруппы", РодительЭлемента, ПередЭлементом, ВместоЭлемента, ФормаГруппы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеТаблицыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(__ИдентификаторОбработки + ".Форма.ФормаРедактированияТаблицы", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеТаблицыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительЭлемента = ДополнительныеПараметры.РодительЭлемента;
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ВместоЭлемента) Тогда 
		ВместоЭлемента = ДополнительныеПараметры.ВместоЭлемента;
		ИндексЭлемента =  РодительЭлемента.Элементы.Найти(ВместоЭлемента);
		
		РодительЭлемента.Элементы[ИндексЭлемента] = РезультатЗакрытия;	
	Иначе
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ПередЭлементом) Тогда
			ИндексЭлемента =  РодительЭлемента.Элементы.Найти(ДополнительныеПараметры.ПередЭлементом);
			РодительЭлемента.Элементы.Вставить(ИндексЭлемента, РезультатЗакрытия);	
		Иначе
			РодительЭлемента.Элементы.Добавить(РезультатЗакрытия);	
		КонецЕсли;
	КонецЕсли;

	ЭтаФорма.__Редактор = Форматтер().Форматировать(ДополнительныеПараметры.ФормаГруппы);
КонецПроцедуры
 
&НаКлиенте
Процедура __КомандаЗаглушка(Команда)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Заглушка";
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьПрямыеСкобки(Команда)
	ОбернутьВыделенныйТекст("[]", "");
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьФигурныеСкобки(Команда)
	ОбернутьВыделенныйТекст("{", "}");
КонецПроцедуры

&НаКлиенте
Процедура __ДобавитьУгловыеСкобки(Команда)
	ОбернутьВыделенныйТекст("<", ">");
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьБлижайшуюПозициюКурсора(Знач НомерСтроки,Знач НомерКолонки);
	Результат = Новый Структура("НомерСтроки,НомерКолонки,Пустая", НомерСтроки, НомерКолонки, Ложь);
	
	СтрокиРедактора = СтрРазделить(__Редактор, Символы.ПС);
	
	ИндексСтроки = Мин(СтрокиРедактора.ВГраница(), НомерСтроки - 1);
	Если ИндексСтроки < 0 Тогда
		Результат.НомерСтроки = 1;
		Результат.НомерКолонки = 1;
		Результат.Пустая = Истина;		
		Возврат Результат;
	КонецЕсли;
	
	Пока Истина Цикл   
		Если ИндексСтроки > СтрокиРедактора.ВГраница() Тогда
			Результат.НомерСтроки = 1;
			Результат.НомерКолонки = СтрокиРедактора.ВГраница() + 1; 
			Результат.Пустая = Истина;
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяСтрока = СтрокиРедактора[ИндексСтроки];
		Если НЕ ПустаяСтрока(ТекущаяСтрока) Тогда
			Прервать;
		КонецЕсли;	
		
		ИндексСтроки = ИндексСтроки + 1;
		НомерКолонки = 1;  
		Результат.Пустая = Истина;		
		
		Продолжить;
	КонецЦикла;
	
	ДлинаСтроки = СтрДлина(СокрП(ТекущаяСтрока));
	Если НомерКолонки > ДлинаСтроки Тогда
		НомерКолонки = ДлинаСтроки;
	КонецЕсли;
	
	Результат.НомерСтроки = ИндексСтроки + 1;
	Результат.НомерКолонки = НомерКолонки;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, ОписаниеЭлемента, Верх, Лево)
	Интервалы = ОписаниеЭлемента.Координаты.Получить(Верх);
	
	Если Интервалы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Интервал Из Интервалы Цикл
		ВходитВИнтервал = Лево >= Интервал.Лево И Лево <= Интервал.Право;
		Если НЕ ВходитВИнтервал Тогда
			Продолжить;
		КонецЕсли;
		
		ИерархияЭлементов.Добавить(ОписаниеЭлемента); 
		Прервать;
	КонецЦикла;
	
	Если НЕ ВходитВИнтервал Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОписаниеЭлемента.Свойство("Элементы") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Подэлемент Из ОписаниеЭлемента.Элементы Цикл
		ПолучитьИерархиюЭлементовПоКоординатам(ИерархияЭлементов, Подэлемент, Верх, Лево);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция Парсер() Экспорт
	Возврат Парсер;
КонецФункции

&НаКлиенте
Функция Синтаксис() Экспорт
	Возврат Синтаксис;
КонецФункции

&НаКлиенте
Функция Форматтер() Экспорт
	Возврат Форматтер;
КонецФункции     

&НаКлиенте
Функция ОпределительРеквизитов() Экспорт
	Возврат ОпределительРеквизитов;
КонецФункции     

&НаКлиенте
Функция Лексема(ИмяПараметра) Экспорт
	Возврат Синтаксис().Лексема(ИмяПараметра);
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибкеПарсинга(Строка, Столбец, Сообщение, Отказ)
	Отказ = Истина;
	ТекстСообщения = СтрШаблон("%1 [%2, %3]", Сообщение, Строка, Столбец);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();  
	
	Элементы.__Редактор.УстановитьГраницыВыделения(Строка, Столбец, Строка, Столбец + 1);
КонецПроцедуры

&НаКлиенте
Функция ЗначениеВМассиве(Знач Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура Построить(ОписаниеГруппы, ОписанияРеквизитов) Экспорт
	ПостроитьНаСервере(ОписаниеГруппы, ОписанияРеквизитов);
КонецПроцедуры

&НаСервере
Процедура ПостроитьНаСервере(Знач ОписаниеГруппы, Знач ОписанияРеквизитов) Экспорт
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПостроитьНаСервере(
		ЭтотОбъект, 
		Элементы.__ГруппаПросмотр, 
		ОписаниеГруппы, 
		ОписанияРеквизитов);
КонецПроцедуры

&НаКлиенте
Процедура ОбернутьВыделенныйТекст(СимволДо, СимволПосле)
	НачалоСтроки = 0;
	НачалоКолонки = 0;
	КонецСтроки = 0;
	КонецКолонки = 0;
	
	Элементы.__Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элементы.__Редактор.ВыделенныйТекст = СимволДо + Элементы.__Редактор.ВыделенныйТекст + СимволПосле;
	Элементы.__Редактор.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки + СтрДлина(СимволДо), КонецСтроки, КонецКолонки + СтрДлина(СимволДо));
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.__Редактор;
КонецПроцедуры

#КонецОбласти  

